import 'caryll-shapeops' as ShapeOps
import './curve-util' as CurveUtil

export : define [SetupBuilders args] : begin
	define [object Glyph globalTransform] args
	define [Boole operator] : lambda [] : let [k : {}.slice.call arguments 0] : lambda [dontinc] : begin
		local g : new Glyph
		set g.gizmo : this.gizmo || globalTransform
		if (k.length == 0) : return g

		g.include k.0
		set g.contours : g.contours.map CurveUtil.convertContourToCubic
		foreach [item : items-of : k.slice 1] : begin
			local g1 : new Glyph
			set g1.gizmo : this.gizmo || globalTransform
			g1.include item
			set g1.contours : g1.contours.map CurveUtil.convertContourToCubic
			local c1 : ShapeOps.boole operator g.contours g1.contours ShapeOps.fillRules.nonzero ShapeOps.fillRules.nonzero 16384
			set g.contours : c1.map : lambda [c] : [CurveUtil.convertContourToCubic c].reverse
		this.includeGlyph g
		return g

	define union : Boole ShapeOps.ops.union
	define intersection : Boole ShapeOps.ops.intersection
	define difference : Boole ShapeOps.ops.difference

	return [object union intersection difference]