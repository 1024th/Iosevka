###### Mathematical symbols
$$include '../meta/macros.ptl'

import [mix linreg clamp fallback] from '../support/utils'
import [designParameters] from '../meta/aesthetics'

glyph-module

glyph-block NotGlyphFn : begin
	glyph-block-import CommonShapes
	glyph-block-export notGlyph

	define [notGlyphGeneric newid unicode oldid top bot prop shift F] : begin
		create-glyph (newid || 'not' + oldid) unicode : glyph-proc
			include : refer-glyph oldid
			include : F
				fallback top bgopTop
				fallback bot bgopBot
				mix SB RightSB [fallback prop 0.25]
				mix RightSB SB [fallback prop 0.25]
				adviceBlackness 4
				fallback shift 0

	define [notGlyph] : params [newid unicode oldid top bot prop shift] : begin
		notGlyphGeneric newid unicode oldid top bot prop shift
			lambda [t b l r sw sh] : dispiro
				widths.center sw
				flat (sh + l) b
				curl (sh + r) t

	define [notGlyph.right] : params [newid unicode oldid top bot prop shift] : begin
		notGlyph newid unicode oldid top bot prop (-OperatorStroke * 0.5)
	define [notGlyph.left] : params [newid unicode oldid top bot prop shift] : begin
		notGlyph newid unicode oldid top bot prop (OperatorStroke * 0.5)
	define [notGlyph.generic] : params [newid unicode oldid top bot prop shift F] : begin
		notGlyphGeneric newid unicode oldid top bot prop shift F

glyph-block Symbol-Math-Letter-Like : begin

	glyph-block-import CommonShapes
	glyph-block-import Overmarks
	glyph-block-import Letter-Latin-Upper-A : LambdaShape AMaskShape DeltaShape
	glyph-block-import Letter-Latin-Upper-E : RevEShape

	create-glyph 'micro' 0xB5 : glyph-proc # micro
		include [refer-glyph 'mu'] AS_BASE
		if SLAB : if (!para.isItalic) : begin
			include : tagged 'serifLB' : CenterBottomSerif (SB + HalfStroke * HVContrast) Descender Jut

	create-glyph 'forall' 0x2200 : glyph-proc # forall
		include : LambdaShape CAP OperatorStroke true
		eject-contour 'serif'
		include : intersection
			AMaskShape CAP OperatorStroke true
			HBar 0 Width (XH / 2) OperatorStroke
		include : FlipAround Middle (CAP / 2)

	create-glyph 'exists' 0x2203 : glyph-proc # exists
		include : RevEShape (top -- CAP) (pyBar -- 0.51) (noSerif -- true)

	create-glyph 'emptyset' 0x2205 : glyph-proc # emptyset
		include : OShape CAP 0 SB RightSB OperatorStroke

		local fine : OperatorStroke / 2
		include : dispiro
			widths.center OperatorStroke
			flat (SB + O + fine) [mix CAP 0 1.05]
			curl (RightSB - O - fine) [mix 0 CAP 1.05]

	create-glyph 'increment' 0x2206 : glyph-proc # increment
		include MarkSet.capital
		include : DeltaShape CAP OperatorStroke true

	turned 'nabla' 0x2207 'increment' Middle (CAP / 2)

	if [not recursive] : for-width-kinds WideWidth1 : do
		local s : (RightSB - SB - O * 4 + (MosaicWidth - Width) * 0.5) / CAP
		local df : Miniature
			glyphs     -- {'eight.lnum' 'rotetedpropto'}
			crowd      -- 4
			scale      -- s
			slopeAngle -- 0

		create-glyph [MangleName 'infty'] [MangleUnicode 0x221E] : glyph-proc # infty
			set-width MosaicWidth
			include df.'eight.lnum'
			include : Translate (-(Width / 2)) (-CAP / 2)
			include : Rotate (Math.PI / 2)
			include : Scale s
			include : Translate (MosaicWidth / 2) symbolMid
			include : Italify

		create-glyph [MangleName 'propto'] [MangleUnicode 0x221D] : glyph-proc # propto
			set-width MosaicWidth
			include df.rotetedpropto
			include : Translate (-(Width / 2)) (-CAP / 2)
			include : Rotate (Math.PI / 2)
			include : Scale s
			include : Translate (MosaicWidth / 2) symbolMid
			include : Italify

	create-glyph 'partial' 0x2202 : glyph-proc # partial
		include MarkSet.b
		include : OShape (CAP * 0.65) 0 SB RightSB OperatorStroke
		include : dispiro
			widths.lhs OperatorStroke
			flat (RightSB - OX) SmallSmoothA
			curl (RightSB - OX) (CAP - SmallSmoothB)
			hookend (CAP - O)
			g4   SB (CAP - Hook)


glyph-block Symbol-Math-Frame-And-Geometry : begin
	glyph-block-import CommonShapes
	local sw GeometryStroke
	local kBox : 2 / 3
	local leftBox : SB * kBox
	local rightBox : Width - SB * kBox
	local radiusBox : (rightBox - leftBox) / 2
	local topBox : symbolMid + radiusBox
	local bottomBox : symbolMid - radiusBox


	local kCircle : 2 / 3
	local leftCircle : SB * kCircle
	local rightCircle : Width - SB * kCircle
	local radiusCircle : (rightCircle - leftCircle) / 2

	create-glyph 'mathO' : glyph-proc # mathO
		include : dispiro
			widths.lhs GeometryStroke
			g4 Middle (symbolMid + radiusCircle - O)
			archv nothing 2
			g4 (leftCircle + O) symbolMid
			arcvh nothing 2
			g4 Middle (symbolMid - radiusCircle + O)
			archv nothing 2
			g4 (rightCircle - O) symbolMid
			arcvh nothing 2
			close

	create-glyph 'mathOOutline' : glyph-proc # mathO-outline
		include : spiro-outline
			g4 Middle (symbolMid + radiusCircle)
			archv nothing 2
			g4 (leftCircle) symbolMid
			arcvh nothing 2
			g4 Middle (symbolMid - radiusCircle)
			archv nothing 2
			g4 (rightCircle) symbolMid
			arcvh nothing 2
			close

	create-glyph 'mathBoxOutline' : glyph-proc # mathBoxOutline
		include : spiro-outline
			corner leftBox topBox
			corner leftBox bottomBox
			corner rightBox bottomBox
			corner rightBox topBox

	create-glyph 'mathBox' : glyph-proc # mathBox
		include : intersection [refer-glyph 'mathBoxOutline'] : union
			dispiro [widths.lhs sw] [flat leftBox topBox] [curl leftBox bottomBox]
			dispiro [widths.lhs sw] [flat leftBox bottomBox] [curl rightBox bottomBox]
			dispiro [widths.lhs sw] [flat rightBox bottomBox] [curl rightBox topBox]
			dispiro [widths.lhs sw] [flat rightBox topBox] [curl leftBox topBox]

	for-width-kinds WideWidth1
		local radiusBig : (tackTop - tackBot) / 2 * [Math.sqrt MosaicWidthScalar]
		local leftBig : MosaicMiddle - radiusBig
		local rightBig : MosaicMiddle + radiusBig
		create-glyph [MangleName 'mathOBig'] : glyph-proc # mathOBig
			set-width MosaicWidth
			include : dispiro
				widths.lhs GeometryStroke
				g4 MosaicMiddle (symbolMid + radiusBig - O)
				archv nothing 2
				g4 (leftBig + O) symbolMid
				arcvh nothing 2
				g4 MosaicMiddle (symbolMid - radiusBig + O)
				archv nothing 2
				g4 (rightBig - O) symbolMid
				arcvh nothing 2
				close

		create-glyph [MangleName 'mathOOutlineBig'] : glyph-proc # mathOOutlineBig
			set-width MosaicWidth
			include : spiro-outline
				g4 MosaicMiddle (symbolMid + radiusBig)
				archv nothing 2
				g4 (leftBig) symbolMid
				arcvh nothing 2
				g4 MosaicMiddle (symbolMid - radiusBig)
				archv nothing 2
				g4 (rightBig) symbolMid
				arcvh nothing 2
				close

	create-glyph 'mathRightTriangle' 0x22BF : glyph-proc
		include : intersection
			spiro-outline
				corner leftBox bottomBox
				corner rightBox bottomBox
				corner rightBox topBox
			union
				dispiro [widths.lhs sw] [flat leftBox bottomBox] [curl rightBox bottomBox]
				dispiro [widths.lhs sw] [flat rightBox bottomBox] [curl rightBox topBox]
				dispiro [widths.lhs sw] [flat rightBox topBox] [curl leftBox bottomBox]

	create-glyph 'angle' 0x2220 : glyph-proc
		include : intersection
			spiro-outline
				corner leftBox bottomBox
				corner rightBox bottomBox
				corner rightBox topBox
			union
				dispiro [widths.lhs sw] [flat leftBox bottomBox] [curl rightBox bottomBox]
				dispiro [widths.lhs sw] [flat rightBox topBox] [curl leftBox bottomBox]

	create-glyph 'rightAngle' 0x221F : glyph-proc
		include : intersection
			spiro-outline
				corner leftBox bottomBox
				corner rightBox bottomBox
				corner rightBox topBox
				corner leftBox topBox
			union
				dispiro [widths.lhs sw] [flat leftBox bottomBox] [curl rightBox bottomBox]
				dispiro [widths.lhs sw] [flat leftBox topBox] [curl leftBox bottomBox]

glyph-block Symbol-Math-Arith : begin
	glyph-block-import CommonShapes
	glyph-block-export PlusShape

	define [PlusShape left right s sw] : union
		HBar left right symbolMid [fallback sw OperatorStroke]
		VBar (Middle + [fallback s 0]) plusTop plusBot [fallback sw OperatorStroke]

	create-glyph 'plus' '+' : glyph-proc # plus
		include : PlusShape SB RightSB

	create-glyph 'innerPlus' : glyph-proc # plus
		include : PlusShape SB RightSB 0 GeometryStroke

	create-glyph 'minus' 0x2212 : glyph-proc # minus
		include : HBar SB RightSB symbolMid OperatorStroke
		create-derived 'minusDot' 0x2238 : DotAt Middle plusTop DotRadius

	create-glyph 'minusColon' 0x2239 : glyph-proc # colon-equal
		include : refer-glyph "baselineDot"
		include : refer-glyph "xhDot"

		local sbSquash 0.5

		local delta : Math.max 0 : Width / 2 - DotRadius - SB * sbSquash
		include : Upright
		include : Translate (+delta) (symbolMid - XH / 2)
		include : Italify

		include : HBar (SB * sbSquash) (RightSB - DotSize) symbolMid OperatorStroke

	create-glyph 'innerMinus' : glyph-proc # innerMinus
		include : HBar SB RightSB symbolMid GeometryStroke

	create-glyph 'plusminus' 0xB1 : glyph-proc # plusminus
		include : HBarBottom SB RightSB 0 OperatorStroke
		include : refer-glyph "plus"

	turned 'minusplus' 0x2213 'plusminus' Middle symbolMid
	create-glyph 'dotplus' 0x2214 : glyph-proc
		local gap : adviceBlackness 12
		include : union
			DotAt Middle (symbolMid * 2 - OperatorStroke / 2) DotRadius
			difference
				refer-glyph 'plus'
				DotAt Middle (symbolMid * 2 - OperatorStroke / 2) (DotRadius + gap)

	define MultiplyHalfHeight : (RightSB - SB) / 2
	define swBowtie : adviceBlackness 4
	define [MultiplyMask p1 p2] : spiro-outline
		corner (Middle - p1 * MultiplyHalfHeight) (symbolMid - p1 * MultiplyHalfHeight)
		corner (Middle + p2 * MultiplyHalfHeight) (symbolMid + p2 * MultiplyHalfHeight)
		corner (Middle + p2 * MultiplyHalfHeight) (symbolMid - p2 * MultiplyHalfHeight)
		corner (Middle - p1 * MultiplyHalfHeight) (symbolMid + p1 * MultiplyHalfHeight)

	define [MultiplyStroke1Shape s p1 p2] : dispiro
		widths.center s
		flat (Middle - p1 * MultiplyHalfHeight) (symbolMid - p1 * MultiplyHalfHeight)
		curl (Middle + p2 * MultiplyHalfHeight) (symbolMid + p2 * MultiplyHalfHeight)

	define [MultiplyStroke2Shape s p1 p2] : dispiro
		widths.center s
		flat (Middle - p1 * MultiplyHalfHeight) (symbolMid + p1 * MultiplyHalfHeight)
		curl (Middle + p2 * MultiplyHalfHeight) (symbolMid - p2 * MultiplyHalfHeight)

	create-glyph 'multiply' 0xD7 : glyph-proc
		include : MultiplyStroke1Shape OperatorStroke 1 1
		include : MultiplyStroke2Shape OperatorStroke 1 1

	create-glyph 'bowtie' 0x22C8 : glyph-proc
		include : union
			intersection
				MultiplyMask 1 1
				union
					VBarLeft SB (symbolMid - MultiplyHalfHeight) (symbolMid + MultiplyHalfHeight) swBowtie
					VBarRight RightSB (symbolMid - MultiplyHalfHeight) (symbolMid + MultiplyHalfHeight) swBowtie
			intersection
				Rect parenTop parenBot SB RightSB
				union
					MultiplyStroke1Shape swBowtie 1 1
					MultiplyStroke2Shape swBowtie 1 1

	create-glyph 'bowtieLeft' 0x22C9 : glyph-proc
		include : union
			intersection
				MultiplyMask 1 1
				VBarLeft SB (symbolMid - MultiplyHalfHeight) (symbolMid + MultiplyHalfHeight) swBowtie
			intersection
				Rect parenTop parenBot SB [mix SB RightSB 2]
				union
					MultiplyStroke1Shape swBowtie 1 1
					MultiplyStroke2Shape swBowtie 1 1

	create-glyph 'bowtieRight' 0x22CA : glyph-proc
		include : union
			intersection
				MultiplyMask 1 1
				VBarRight RightSB (symbolMid - MultiplyHalfHeight) (symbolMid + MultiplyHalfHeight) swBowtie
			intersection
				Rect parenTop parenBot [mix RightSB SB 2] RightSB
				union
					MultiplyStroke1Shape swBowtie 1 1
					MultiplyStroke2Shape swBowtie 1 1

	create-glyph 'leftSemidirectProduct' 0x22CB : glyph-proc
		include : MultiplyStroke1Shape OperatorStroke 1 0
		include : MultiplyStroke2Shape OperatorStroke 1 1

	create-glyph 'rightSemidirectProduct' 0x22CC : glyph-proc
		include : MultiplyStroke1Shape OperatorStroke 1 1
		include : MultiplyStroke2Shape OperatorStroke 0 1

	create-glyph 'innerMultiplyStroke1' : glyph-proc
		include : MultiplyStroke1Shape GeometryStroke 1 1

	create-glyph 'innerMultiply' : glyph-proc
		include : MultiplyStroke1Shape GeometryStroke 1 1
		include : MultiplyStroke2Shape GeometryStroke 1 1

	create-glyph 'divide' 0xF7 : glyph-proc # divide
		include : refer-glyph "minus"
		local radius : (RightSB - SB) / 2
		include : Ring (symbolMid + radius + DotRadius) (symbolMid + radius - DotRadius) (Middle - DotRadius + O) (Middle + DotRadius - O) true
		include : Ring (symbolMid - radius + DotRadius) (symbolMid - radius - DotRadius) (Middle - DotRadius + O) (Middle + DotRadius - O) true

	do
		define fine : adviceBlackness 5.5
		define radius : Math.max ((RightSB - SB) / 12) (fine / 2)
		define barOffset radius
		define dotCenterOffset : OX + fine + radius
		create-glyph 'originalOf' 0x22b6 : glyph-proc
			include : difference
				union
					HBar (SB + barOffset) (RightSB - barOffset) symbolMid OperatorStroke
					DotAt (SB + dotCenterOffset) symbolMid (radius + fine)
					DotAt (RightSB - dotCenterOffset) symbolMid (radius + fine)
				DotAt (SB + dotCenterOffset) symbolMid radius

		create-glyph 'imageOf' 0x22b7 : glyph-proc
			include : difference
				union
					HBar (SB + barOffset) (RightSB - barOffset) symbolMid OperatorStroke
					DotAt (SB + dotCenterOffset) symbolMid (radius + fine)
					DotAt (RightSB - dotCenterOffset) symbolMid (radius + fine)
				DotAt (RightSB - dotCenterOffset) symbolMid radius

		create-glyph 'multimap' 0x22b8 : glyph-proc
			include : difference
				union
					HBar SB (RightSB - barOffset) symbolMid OperatorStroke
					DotAt (RightSB - dotCenterOffset) symbolMid (radius + fine)
				DotAt (RightSB - dotCenterOffset) symbolMid radius


glyph-block Symbol-Math-Dots-And-Colons : begin
	glyph-block-import CommonShapes
	local radius1 PeriodRadius
	local radius : Math.min PeriodRadius (0.5 * [adviceBlackness 3.5] * PeriodSize / Stroke)
	local left : mix 0 Width (1 / 4)
	local right : mix 0 Width (3 / 4)
	create-glyph 'therefore' 0x2234 : glyph-proc
		include : Ring (XH - O) (XH - radius * 2 + O) (Middle - radius + O) (Middle + radius - O) true
		include : Ring (radius * 2 - O) O (left - radius + O) (left + radius - O) true
		include : Ring (radius * 2 - O) O (right - radius + O) (right + radius - O) true

	create-glyph 'because' 0x2235 : glyph-proc
		include : Ring (XH - O) (XH - radius * 2 + O) (left - radius + O) (left + radius - O) true
		include : Ring (XH - O) (XH - radius * 2 + O) (right - radius + O) (right + radius - O) true
		include : Ring (radius * 2 - O) O (Middle - radius + O) (Middle + radius - O) true

	create-glyph 'mathcolon' 0x2236 : glyph-proc
		include : Ring (PeriodRadius * 2 - O) O (Middle - PeriodRadius + O) (Middle + PeriodRadius - O) true
		include : Ring (XH - O) (XH - PeriodRadius * 2 + O) (Middle - PeriodRadius + O) (Middle + PeriodRadius - O) true

	create-glyph 'coloncolon' 0x2237 : glyph-proc # coloncolon
		include : Ring (radius * 2 - O) O (left - radius + O) (left + radius - O) true
		include : Ring (radius * 2 - O) O (right - radius + O) (right + radius - O) true
		include : Ring (XH - O) (XH - radius * 2 + O) (left - radius + O) (left + radius - O) true
		include : Ring (XH - O) (XH - radius * 2 + O) (right - radius + O) (right + radius - O) true

	create-glyph 'mathcdot' : glyph-proc # mathcdot
		include : Ring (symbolMid + PeriodRadius - O) (symbolMid - PeriodRadius + O) (Middle - PeriodRadius + O) (Middle + PeriodRadius - O) true

	for-width-kinds WideWidth1
		create-glyph [MangleName 'mathcdotBig'] : glyph-proc # mathcdot
			set-width MosaicWidth
			include : Ring (symbolMid + PeriodRadius - O) (symbolMid - PeriodRadius + O) (MosaicMiddle - PeriodRadius + O) (MosaicMiddle + PeriodRadius - O) true

		create-glyph [MangleName 'innerPlusBig'] : glyph-proc # plus
			set-width MosaicWidth
			include : union
				HBar SB (MosaicWidth - SB) symbolMid GeometryStroke
				VBar MosaicMiddle [mix symbolMid plusTop MosaicWidthScalar] [mix symbolMid plusBot MosaicWidthScalar] GeometryStroke

		create-glyph [MangleName 'innerMultiplyStroke1Big'] : glyph-proc # innerMultiplyStroke1Big
			set-width MosaicWidth
			local radius : (RightSB - SB) / 2 * [Math.sqrt MosaicWidthScalar]
			include : dispiro
				widths.center GeometryStroke
				flat (MosaicMiddle - radius) (symbolMid - radius)
				curl (MosaicMiddle + radius) (symbolMid + radius)

		create-glyph [MangleName 'innerMultiplyStroke2Big'] : glyph-proc # innerMultiplyStroke2Big
			set-width MosaicWidth
			local radius : (RightSB - SB) / 2 * [Math.sqrt MosaicWidthScalar]
			include : dispiro
				widths.center GeometryStroke
				flat (MosaicMiddle + radius) (symbolMid - radius)
				curl (MosaicMiddle - radius) (symbolMid + radius)

		create-glyph [MangleName 'innerMultiplyBig'] : glyph-proc # innerMultiplyBig
			set-width MosaicWidth
			include : refer-glyph : MangleName "innerMultiplyStroke1Big"
			include : refer-glyph : MangleName "innerMultiplyStroke2Big"

	composite 'mathAsterisk' [refer-glyph 'opAsterisk.low'] [into-unicode 0x2217]


glyph-block Symbol-Math-Circled : begin
	glyph-block-import CommonShapes
	composite [refer-glyph 'mathO'] [intersection [refer-glyph 'mathOOutline'] [refer-glyph 'innerPlus']] [into-unicode 0x2295]
	composite [refer-glyph 'mathO'] [intersection [refer-glyph 'mathOOutline'] [refer-glyph 'innerMinus']] [into-unicode 0x2296]
	composite [refer-glyph 'mathO'] [intersection [refer-glyph 'mathOOutline'] [refer-glyph 'innerMultiply']] [into-unicode 0x2297]
	composite [refer-glyph 'mathO'] [intersection [refer-glyph 'mathOOutline'] [refer-glyph 'innerMultiplyStroke1']] [into-unicode 0x2298]
	composite [refer-glyph 'mathO'] [intersection [refer-glyph 'mathOOutline'] [refer-glyph 'mathcdot']] [into-unicode 0x2299]
	composite [refer-glyph 'mathO'] [intersection [refer-glyph 'mathOOutline'] [refer-glyph 'smallwhitecircle.NWID']] [into-unicode 0x229A]
	composite [refer-glyph 'mathO'] [intersection [refer-glyph 'mathOOutline'] [refer-glyph 'mathAsterisk']] [into-unicode 0x229B]

	for-width-kinds WideWidth1
		composite [MangleName 'uni2A00'] [refer-glyph : MangleName 'mathOBig'] [intersection [refer-glyph : MangleName 'mathOOutlineBig'] [refer-glyph : MangleName 'mathcdotBig']] [into-unicode : MangleUnicode 0x2A00]
		composite [MangleName 'uni2A01'] [refer-glyph : MangleName 'mathOBig'] [intersection [refer-glyph : MangleName 'mathOOutlineBig'] [refer-glyph : MangleName 'innerPlusBig']] [into-unicode : MangleUnicode 0x2A01]
		composite [MangleName 'uni2A02'] [refer-glyph : MangleName 'mathOBig'] [intersection [refer-glyph : MangleName 'mathOOutlineBig'] [refer-glyph : MangleName 'innerMultiplyBig']] [into-unicode : MangleUnicode 0x2A02]

	composite
		refer-glyph 'mathO'
		intersection
			refer-glyph 'mathOOutline'
			HBar (SB + GeometryStroke) (RightSB - GeometryStroke) symbolMid GeometryStroke
		into-unicode 0x229D

	local eqS : Math.min GeometryStroke ((RightSB - SB) / 8)
	local eqD : Math.max eqS ((RightSB - SB) / 6)
	composite
		refer-glyph 'mathO'
		intersection [refer-glyph 'mathOOutline'] : union
			HBar (SB + eqS) (RightSB - eqS) (symbolMid + eqD) eqS
			HBar (SB + eqS) (RightSB - eqS) (symbolMid - eqD) eqS
		into-unicode 0x229C

glyph-block Symbol-Math-Boxed : begin
	glyph-block-import CommonShapes
	composite [refer-glyph 'mathBox'] [intersection [refer-glyph 'mathBoxOutline'] [refer-glyph 'innerPlus']] [into-unicode 0x229E]
	composite [refer-glyph 'mathBox'] [intersection [refer-glyph 'mathBoxOutline'] [refer-glyph 'innerMinus']] [into-unicode 0x229F]
	composite [refer-glyph 'mathBox'] [intersection [refer-glyph 'mathBoxOutline'] [refer-glyph 'innerMultiply']] [into-unicode 0x22A0]
	composite [refer-glyph 'mathBox'] [intersection [refer-glyph 'mathBoxOutline'] [refer-glyph 'mathcdot']] [into-unicode 0x22A1]

glyph-block Symbol-Math-VAndCup : begin
	glyph-block-import CommonShapes
	glyph-block-import Letter-Latin-Upper-U : UShape
	glyph-block-import Letter-Greek-Pi : PiShape
	glyph-block-import Symbol-Arrow : ArrowShape

	create-glyph 'vee' 0x2228 : glyph-proc # vee
		include : dispiro
			widths.center OperatorStroke
			flat SB operTop [heading Downward]
			curl Middle operBot [heading Downward]

		include : dispiro
			widths.center OperatorStroke
			flat RightSB operTop [heading Downward]
			curl Middle operBot [heading Downward]

	turned 'wedge' 0x2227 'vee' Middle symbolMid

	create-glyph 'curlyVee' 0x22CE : glyph-proc # curlyVee
		local fine : CThin * OperatorStroke
		include : dispiro
			g4 SB operTop [widths.center OperatorStroke]
			straight.down.end (Middle - OperatorStroke / 2 * HVContrast) operBot [widths.heading fine 0 Downward]

		include : dispiro
			widths.center OperatorStroke
			g4 RightSB operTop [widths.center OperatorStroke]
			straight.down.end (Middle + OperatorStroke / 2 * HVContrast) operBot [widths.heading 0 fine Downward]

	turned 'curlyWedge' 0x22CF 'curlyVee' Middle symbolMid

	create-glyph 'doubleVee' 0x2A54 : glyph-proc # doubleVee
		define sw : adviceBlackness 6
		include : dispiro
			widths.center sw
			flat SB operTop [heading Downward]
			curl Middle operBot [heading Downward]

		include : dispiro
			widths.center sw
			flat RightSB operTop [heading Downward]
			curl Middle operBot [heading Downward]

		define offsetRatio : 1 / 4
		define bias : (RightSB - SB) * offsetRatio
		define a : dispiro
			widths.center sw
			flat (SB + bias) operTop [heading Downward]
			curl (Middle + bias) operBot [heading Downward]
		define b : dispiro
			widths.center sw
			flat (RightSB - bias) operTop [heading Downward]
			curl (Middle - bias) operBot [heading Downward]

		include : union
			intersection a b
			difference
				union a b
				spiro-outline
					corner 0 operBot
					corner Width operBot
					corner Width [mix operBot operTop (1 - 2 * offsetRatio)]
					corner 0 [mix operBot operTop (1 - 2 * offsetRatio)]

	turned 'doubleWedge' 0x2A53 'doubleVee' Middle symbolMid

	create-glyph 'cup' 0x222A : glyph-proc # cup
		include : UShape [DivFrame 1] operTop operBot OperatorStroke true

		create-derived 'cupDot' 0x228D : glyph-proc
			include : DotAt Middle (operBot + Smooth) [Math.min DotRadius ((RightSB - SB - OperatorStroke * HVContrast * 2) * (1 / 3))]

		create-derived 'cupArrowLeft' 0x228C : glyph-proc
			local mockUpscale : OperatorStroke / [adviceBlackness 6]
			local arrowLength : mockUpscale * [Math.min (RightSB - SB - OperatorStroke * HVContrast * 2) (Width * 0.6)]
			include : new-glyph : glyph-proc
				include : ArrowShape
					Middle + arrowLength / 2
					operBot + Smooth
					Middle - arrowLength / 2
					operBot + Smooth
					arrowLength * 0.5
				include : Upright
				include : Translate (-Middle) (-operBot - Smooth)
				include : Scale (1 / mockUpscale) (1 / mockUpscale)
				include : Translate Middle (operBot + Smooth)
				include : Italify

		create-derived 'cupPlus' 0x228E : glyph-proc
			local sw : adviceBlackness 6
			local size : Math.min (RightSB - SB - OperatorStroke * HVContrast * (2 + 0.5 * sw / OperatorStroke)) ((RightSB - SB) * 0.8)
			include : dispiro
				widths.center sw
				corner (Middle - size / 2) (operBot + Smooth)
				corner (Middle + size / 2) (operBot + Smooth)
			include : dispiro
				widths.center sw
				corner Middle (operBot + Smooth - size / 2)
				corner Middle (operBot + Smooth + size / 2)

	turned 'cap' 0x2229 'cup' Middle symbolMid
	turned 'capDot' 0x2A40 'cupDot' Middle symbolMid

	create-glyph 'squareCap' 0x2293 : glyph-proc # squareCap
		include : PiShape operTop operBot (shrinkrate -- 0) (_fine -- OperatorStroke) (div -- 1) (noSerif -- true)

	turned 'squareCup' 0x2294 'squareCap' Middle symbolMid


glyph-block Symbol-Math-Logicals : begin
	glyph-block-import CommonShapes

	create-glyph 'negate' 0xAC : glyph-proc # negate
		include : refer-glyph "minus"
		include : VBarRight RightSB (symbolMid - (RightSB - SB) * 0.55) symbolMid OperatorStroke

	create-glyph 'revNegate' 0x2310 : glyph-proc
		include : refer-glyph "minus"
		include : VBarLeft SB (symbolMid - (RightSB - SB) * 0.55) symbolMid OperatorStroke

	local top tackTop
	local bot tackBot
	create-glyph 'vdash' 0x22A2 : glyph-proc # vdash
		include : HBar SB RightSB symbolMid OperatorStroke
		include : VBarLeft SB top bot OperatorStroke

	turned 'dashv' 0x22A3 'vdash' Middle symbolMid

	create-glyph 'assert' 0x22A6 : glyph-proc # assert
		local l : mix Middle SB designParameters.logic_narrow_shrink
		local r : mix Middle RightSB designParameters.logic_narrow_shrink
		include : HBar l r symbolMid OperatorStroke
		include : VBarLeft l top bot OperatorStroke

	create-glyph 'models' 0x22A7 : glyph-proc # models
		local l : mix Middle SB designParameters.logic_narrow_shrink
		local r : mix Middle RightSB designParameters.logic_narrow_shrink
		include : HBar l r [mix symbolMid top (1 / 3)] OperatorStroke
		include : HBar l r [mix symbolMid bot (1 / 3)] OperatorStroke
		include : VBarLeft l top bot OperatorStroke

	create-glyph 'tautology' 0x22A8 : glyph-proc # tautology
		local l : mix Middle SB 1
		local r : mix Middle RightSB 1
		include : HBar l r [mix symbolMid top (1 / 3)] OperatorStroke
		include : HBar l r [mix symbolMid bot (1 / 3)] OperatorStroke
		include : VBarLeft l top bot OperatorStroke

	create-glyph 'forces' 0x22A9 : glyph-proc # forces
		local l : mix Middle SB 1
		local r : mix Middle RightSB 1
		local vs : adviceBlackness 4
		local m : mix l (r - vs) (3 / 5)
		include : HBar m r symbolMid OperatorStroke
		include : VBarLeft l top bot vs
		include : VBar     m top bot vs

	create-glyph 'tripleBarForces' 0x22AA : glyph-proc # tripleBarForces
		local l : mix Middle SB 1
		local r : mix Middle RightSB 1
		local vs : adviceBlackness 5
		local m : mix l (r - vs) (3 / 4)
		include : HBar m r symbolMid OperatorStroke
		include : VBarLeft l top bot vs
		include : VBar     m top bot vs
		include : VBar     ([mix l m (1/2)] + vs / 4 * HVContrast) top bot vs

	create-glyph 'doubleForces' 0x22AB : glyph-proc # doubleForces
		local l : mix Middle SB 1
		local r : mix Middle RightSB 1
		local vs : adviceBlackness 4
		local m : mix l (r - vs) (3 / 5)
		include : HBar m r [mix symbolMid top (1 / 3)] OperatorStroke
		include : HBar m r [mix symbolMid bot (1 / 3)] OperatorStroke
		include : VBarLeft l top bot vs
		include : VBar     m top bot vs

	create-glyph 'top' 0x22A4 : glyph-proc # top
		include : HBarTop SB RightSB top OperatorStroke
		include : VBar Middle top bot OperatorStroke

	composite 'bot' [refer-glyph 'top'] [FlipAround Middle symbolMid] [into-unicode 0x22A5]

	create-glyph 'topring' 0x2355 : glyph-proc # topring
		define mid : mix bot (top - OperatorStroke / 2) 0.5
		define w : (RightSB - SB) * 0.4
		define fine : Math.min (w / 2.5) [adviceBlackness 5]
		include : HBarTop SB RightSB top OperatorStroke
		include : VBar Middle top (mid + w) OperatorStroke
		include : VBar Middle (mid - w) bot OperatorStroke
		include : VBar Middle (mid + w) (mid - w) fine
		include : OShape (mid + w) (mid - w) (Middle - w) (Middle + w) fine

	composite 'botring' [refer-glyph 'topring'] [FlipAround Middle symbolMid] [into-unicode 0x234E]
	create-glyph 'perpendicular' 0x27C2 : glyph-proc # perp
		include : HBarBottom SB RightSB 0 OperatorStroke
		include : VBar Middle (symbolMid * 2) 0 OperatorStroke

	create-glyph 'endOfProof' 0x220E : glyph-proc # endOfProof
		include : Rect tackTop tackBot SB RightSB


glyph-block Symbol-Math-Relation : begin
	glyph-block-import CommonShapes
	glyph-block-import Overmarks : TildeShape
	glyph-block-export dH LessSlope
	glyph-block-export LessShape GreaterShape LigationLessShape LigationGreaterShape
	glyph-block-export EqualShape EqualHole IdentShape IdentHole EqualHalfSpace

	define EqualHalfSpace : (operTop - operBot) * 2 * designParameters.equal_wideness
	define LessSlope : (4 / 13) * (operTop - operBot) / (RightSB - SB)
	define dH : LessSlope * (RightSB - SB)
	define lessEqDist : Math.max [adviceBlackness 4] (XH * 0.16)

	define [EqualShape left right] : union
		HBar left right (symbolMid + EqualHalfSpace) OperatorStroke
		HBar left right (symbolMid - EqualHalfSpace) OperatorStroke

	define [EqualHole x]
		VBar x (symbolMid - EqualHalfSpace) (symbolMid + EqualHalfSpace) [adviceBlackness 6]

	define [IdentShape left right] : union
		HBar left right (symbolMid + EqualHalfSpace * 1.5) OperatorStroke
		HBar left right symbolMid OperatorStroke
		HBar left right (symbolMid - EqualHalfSpace * 1.5) OperatorStroke
	define [IdentHole x]
		VBar x (symbolMid - EqualHalfSpace * 1.5) (symbolMid + EqualHalfSpace * 1.5) [adviceBlackness 6]

	create-glyph 'equal' '=' : glyph-proc
		include : EqualShape SB RightSB

	create-glyph 'oneDotApproxEq' 0x2250 : glyph-proc
		include : refer-glyph 'equal'
		include : DotAt Middle (symbolMid + EqualHalfSpace * 2.5) DotRadius

	create-glyph 'twoDotApproxEqCenter' 0x2251 : glyph-proc
		include : refer-glyph 'equal'
		include : DotAt Middle (symbolMid + EqualHalfSpace * 2.5) DotRadius
		include : DotAt Middle (symbolMid - EqualHalfSpace * 2.5) DotRadius

	create-glyph 'twoDotApproxEq' 0x2252 : glyph-proc
		include : refer-glyph 'equal'
		include : DotAt [mix SB RightSB (1/6)] (symbolMid + EqualHalfSpace * 2.5) DotRadius
		include : DotAt [mix SB RightSB (5/6)] (symbolMid - EqualHalfSpace * 2.5) DotRadius

	create-glyph 'twoDotApproxEqAlt' 0x2253 : glyph-proc
		include : refer-glyph 'equal'
		include : DotAt [mix SB RightSB (5/6)] (symbolMid + EqualHalfSpace * 2.5) DotRadius
		include : DotAt [mix SB RightSB (1/6)] (symbolMid - EqualHalfSpace * 2.5) DotRadius

	create-glyph 'ringInEqual' 0x2256 : glyph-proc
		local ringSw : adviceBlackness 4
		include : difference
			refer-glyph 'equal'
			RingAt Middle symbolMid (EqualHalfSpace + O + ringSw / 2)
		include : RingStrokeAt Middle symbolMid (EqualHalfSpace + ringSw / 2) ringSw

	create-glyph 'geometricallyEquivalentTo' 0x224E : glyph-proc
		local ringSw : adviceBlackness 4
		local halfGap : EqualHalfSpace - OperatorStroke / 2
		local outerRad : EqualHalfSpace + ringSw / 2
		include : difference
			refer-glyph 'equal'
			OShapeOutline.NoOvershoot
				symbolMid + EqualHalfSpace + outerRad
				symbolMid - EqualHalfSpace - outerRad
				Middle - outerRad
				Middle + outerRad
				begin ringSw
				SmoothAOf outerRad Width
				SmoothBOf outerRad Width
		include : difference
			OShape
				symbolMid + EqualHalfSpace + outerRad
				symbolMid - EqualHalfSpace - outerRad
				Middle - outerRad
				Middle + outerRad
				begin ringSw
				SmoothAOf outerRad Width
				SmoothBOf outerRad Width
			Rect (symbolMid + halfGap) (symbolMid - halfGap) 0 Width

	create-glyph 'differenceBetween' 0x224F : glyph-proc
		include : intersection
			Rect parenTop symbolMid 0 Width
			refer-glyph 'geometricallyEquivalentTo'
		include : intersection
			Rect symbolMid parenBot 0 Width
			refer-glyph 'equal'

	create-glyph 'eqColon' 0x2255 : glyph-proc
		include : refer-glyph "baselineDot"
		include : refer-glyph "xhDot"

		local sbSquash 0.5

		local delta : Math.max 0 : Width / 2 - DotRadius - SB * sbSquash
		include : Upright
		include : Translate (+delta) (symbolMid - XH / 2)
		include : Italify

		include : EqualShape (SB * sbSquash) (RightSB - DotSize)

	create-glyph 'colonEq' 0x2254 : glyph-proc
		include : refer-glyph "baselineDot"
		include : refer-glyph "xhDot"

		local sbSquash 0.5

		local delta : Math.max 0 : Width / 2 - DotRadius - SB * sbSquash
		include : Upright
		include : Translate (-delta) (symbolMid - XH / 2)
		include : Italify

		include : EqualShape (SB + DotSize) (Width - SB * sbSquash)

	create-glyph 'ident' 0x2261 : glyph-proc # ident
		include : IdentShape SB RightSB

	create-glyph 'iiiident' 0x2263 : glyph-proc # iiiident
		include : HBar SB RightSB (symbolMid + EqualHalfSpace * 2.25) OperatorStroke
		include : HBar SB RightSB (symbolMid + EqualHalfSpace * 0.75) OperatorStroke
		include : HBar SB RightSB (symbolMid - EqualHalfSpace * 0.75) OperatorStroke
		include : HBar SB RightSB (symbolMid - EqualHalfSpace * 2.25) OperatorStroke

	define [LessGreaterExpansion top bot l r]
		Math.sqrt : 1 + (top - bot) / (2 * (r - l)) * (top - bot) / (2 * (r - l))

	define [LessMaskShape top bot l r] : spiro-outline
		corner r top
		corner r bot
		corner l [mix bot top 0.5]
	define [GreaterMaskShape top bot l r] : spiro-outline
		corner l top
		corner l bot
		corner r [mix bot top 0.5]
	define [LessShapeA top bot l r s p] : begin
		define exp : LessGreaterExpansion top bot l r
		define pp : fallback p 1
		return : dispiro
			widths.center s
			flat [mix l r pp] [mix [mix top bot 0.5] top pp]
			curl l [mix top bot 0.5] [widths.heading (s / 2 * exp) (s / 2 * exp) Leftward]
	define [LessShapeB top bot l r s p] : begin
		define exp : LessGreaterExpansion top bot l r
		define pp : fallback p 1
		return : dispiro
			widths.center s
			flat [mix l r pp] [mix [mix top bot 0.5] bot pp]
			curl l [mix top bot 0.5] [widths.heading (s / 2 * exp) (s / 2 * exp) Leftward]
	define [GreaterShapeA top bot l r s p] : begin
		define exp : LessGreaterExpansion top bot l r
		define pp : fallback p 1
		return : dispiro
			widths.center s
			flat [mix r l pp] [mix [mix top bot 0.5] top pp]
			curl r [mix top bot 0.5] [widths.heading (s / 2 * exp) (s / 2 * exp) Rightward]
	define [GreaterShapeB top bot l r s p] : begin
		define exp : LessGreaterExpansion top bot l r
		define pp : fallback p 1
		return : dispiro
			widths.center s
			flat [mix r l pp] [mix [mix top bot 0.5] bot pp]
			curl r [mix top bot 0.5] [widths.heading (s / 2 * exp) (s / 2 * exp) Rightward]

	define [LessShape top bot l r s] : union
		LessShapeA top bot l r [fallback s OperatorStroke]
		LessShapeB top bot l r [fallback s OperatorStroke]

	define [LigationLessShape top bot l r s t gap] : union
		intersection
			Rect [mix bot top 2] [mix top bot 2] [mix r l 2] r
			union
				LessShapeA top bot l r [fallback s OperatorStroke] 2
				LessShapeB top bot l r [fallback s OperatorStroke] 2
		intersection
			LessMaskShape top bot l r
			difference
				dispiro
					widths.lhs [fallback t OperatorStroke]
					corner r bot
					corner r top
				Rect ([mix top bot 0.5] + gap / 2) ([mix top bot 0.5] - gap / 2) (l + O) (r - O)

	define [NormalSubsetShape top bot l r s] : LigationLessShape top bot l r s s 0

	define [GreaterShape top bot l r s] : union
		GreaterShapeA top bot l r [fallback s OperatorStroke]
		GreaterShapeB top bot l r [fallback s OperatorStroke]

	define [LigationGreaterShape top bot l r s t gap] : union
		intersection
			Rect [mix bot top 2] [mix top bot 2] [mix l r 2] l
			union
				GreaterShapeA top bot l r [fallback s OperatorStroke] 2
				GreaterShapeB top bot l r [fallback s OperatorStroke] 2
		intersection
			GreaterMaskShape top bot l r
			difference
				dispiro
					widths.rhs [fallback t OperatorStroke]
					corner l bot
					corner l top
				Rect ([mix top bot 0.5] + gap / 2) ([mix top bot 0.5] - gap / 2) (l + O) (r - O)

	define [NormalSupersetShape top bot l r s] : LigationGreaterShape top bot l r s s 0

	# Sym parameters
	local approxDist : EqualHalfSpace * 1.75
	local symMag : (operTop - symbolMid) * 0.17
	define [symWave height mul] : TildeShape
		ttop -- height + symMag * mul
		tbot -- height - symMag * mul
		leftEnd -- SB
		rightEnd -- RightSB
		hs -- OperatorStroke / 2

	define [BarNegator symbolBottom dist] : begin
		local swo : Math.max (OperatorStroke * 1.5) (dist * 1.5)
		return : dispiro
			widths.center OperatorStroke
			flat (Middle + dist) (symbolBottom - dist + swo) [heading Downward]
			flat (Middle - dist) (symbolBottom - dist - swo) [heading Downward]

	create-glyph 'less' '<' : glyph-proc
		include : LessShape (symbolMid + dH) (symbolMid - dH) SB RightSB

	create-glyph 'normalSubsetOf' 0x22B2 : glyph-proc
		include : NormalSubsetShape (symbolMid + dH) (symbolMid - dH) SB RightSB

	create-glyph 'greater' '>' : glyph-proc
		include : GreaterShape (symbolMid + dH) (symbolMid - dH) SB RightSB

	create-glyph 'normalSupersetOf' 0x22B3 : glyph-proc
		include : NormalSupersetShape (symbolMid + dH) (symbolMid - dH) SB RightSB

	create-glyph : glyph-proc # lesseq
		include : LessShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist) SB RightSB
		create-derived 'less.narrow' : glyph-proc
			include : Upright
			include : Translate 0 (-lessEqDist)
			include : Italify
		create-derived 'lesseq' 0x2264 : glyph-proc
			include : HBar SB RightSB (symbolMid - dH - lessEqDist) OperatorStroke
			create-derived 'lesseqBarNegated' 0x2A87 : BarNegator (symbolMid - dH) lessEqDist
		create-derived 'lesssym' 0x2272 : glyph-proc
			include : symWave (symbolMid - dH - lessEqDist) 1
			create-derived 'lesssymBarNegated' 0x22E6 : BarNegator (symbolMid - dH) lessEqDist
		create-derived 'lesseqslant' 0x2A7D : glyph-proc
			include : LessShapeB (symbolMid + dH - lessEqDist) (symbolMid - dH - lessEqDist) SB RightSB OperatorStroke

	create-glyph 'normalSubsetEq' 0x22B4 : glyph-proc
		include : NormalSubsetShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist) SB RightSB
		include : HBar SB RightSB (symbolMid - dH - lessEqDist) OperatorStroke

	create-glyph : glyph-proc # greatereq
		include : GreaterShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist) SB RightSB
		create-derived 'greater.narrow' : glyph-proc
			include : Upright
			include : Translate 0 (-lessEqDist)
			include : Italify
		create-derived 'greatereq' 0x2265 : glyph-proc
			include : HBar SB RightSB (symbolMid - dH - lessEqDist) OperatorStroke
			create-derived 'greatereqBarNegated' 0x2A88 : BarNegator (symbolMid - dH) lessEqDist
		create-derived 'greatersym' 0x2273 : glyph-proc
			include : symWave (symbolMid - dH - lessEqDist) 1
			create-derived 'greatersymBarNegated' 0x22E7 : BarNegator (symbolMid - dH) lessEqDist
		create-derived 'greatereqslant' 0x2A7E : glyph-proc
			include : GreaterShapeB (symbolMid + dH - lessEqDist) (symbolMid - dH - lessEqDist) SB RightSB OperatorStroke

	create-glyph 'normalSupersetEq' 0x22B5 : glyph-proc
		include : NormalSupersetShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist) SB RightSB
		include : HBar SB RightSB (symbolMid - dH - lessEqDist) OperatorStroke

	# Ligation
	create-glyph : glyph-proc
		define l : 0.3 * Width
		define r : 2 * Width - l
		define l2 : l - Width
		define r2 : r - Width
		create-derived 'less.lig2' : glyph-proc
			include : LessShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist) l r
		create-derived 'greater.lig2' : glyph-proc
			include : GreaterShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist) l r
		create-derived 'eq.at-lteq.lig2.flat' : glyph-proc
			include : HBar l2 r2 (symbolMid - dH - lessEqDist) OperatorStroke
			create-aliased-glyph 'eq.at-gteq.lig2.flat'
		create-derived 'eq.at-lteq.lig2.slanted' : glyph-proc
			include : LessShapeB (symbolMid + dH - lessEqDist) (symbolMid - dH - lessEqDist) l2 r2 OperatorStroke
		create-derived 'eq.at-gteq.lig2.slanted' : glyph-proc
			include : GreaterShapeB (symbolMid + dH - lessEqDist) (symbolMid - dH - lessEqDist) l2 r2 OperatorStroke

	select-variant 'eq.at-lteq.lig2'
	select-variant 'eq.at-gteq.lig2'

	do
		define lesslessSW : adviceBlackness 4
		define lesslessSWO : Math.max lesslessSW lessEqDist
		define llggHeight : dH * 2 + lessEqDist * 2
		create-glyph : glyph-proc
			create-derived 'greatereqeq' 0x2267 : glyph-proc
				include : GreaterShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist * 1.75) SB RightSB lesslessSW
				include : HBar SB RightSB (symbolMid - dH + lessEqDist * 2 / 3) lesslessSW
				include : HBar SB RightSB (symbolMid - dH - lessEqDist) lesslessSW
				create-derived 'greatereqeqBarNegated' 0x2269 : dispiro
					widths.center lesslessSW
					flat (Middle + lessEqDist) (symbolMid - dH + lessEqDist * 2 / 3 + lesslessSWO) [heading Downward]
					flat (Middle - lessEqDist) (symbolMid - dH - lessEqDist - lesslessSWO) [heading Downward]
			create-derived 'greaterless' 0x2277 : glyph-proc
				include : GreaterShape (symbolMid + llggHeight / 2) (symbolMid - llggHeight / 6 + lessEqDist) SB RightSB lesslessSW
				include : LessShape (symbolMid + llggHeight / 6 - lessEqDist) (symbolMid - llggHeight / 2) SB RightSB lesslessSW
			create-derived 'greatereqless' 0x22DB : glyph-proc
				include : GreaterShape (symbolMid + llggHeight / 2 + lessEqDist) (symbolMid - llggHeight / 6 + lessEqDist * 2) SB RightSB lesslessSW
				include : LessShape (symbolMid + llggHeight / 6 - lessEqDist * 2) (symbolMid - llggHeight / 2 - lessEqDist) SB RightSB lesslessSW
				include : HBar SB RightSB (symbolMid) lesslessSW

		create-glyph : glyph-proc
			create-derived 'lesseqeq' 0x2266 : glyph-proc
				include : LessShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist * 1.75) SB RightSB lesslessSW
				include : HBar SB RightSB (symbolMid - dH + lessEqDist * 2 / 3) lesslessSW
				include : HBar SB RightSB (symbolMid - dH - lessEqDist) lesslessSW
				create-derived 'lesseqeqBarNegated' 0x2268 : dispiro
					widths.center lesslessSW
					flat (Middle + lessEqDist) (symbolMid - dH + lessEqDist * 2 / 3 + lesslessSWO) [heading Downward]
					flat (Middle - lessEqDist) (symbolMid - dH - lessEqDist - lesslessSWO) [heading Downward]
			create-derived 'lessgreater' 0x2276 : glyph-proc
				include : LessShape (symbolMid + llggHeight / 2) (symbolMid - llggHeight / 6 + lessEqDist) SB RightSB lesslessSW
				include : GreaterShape (symbolMid + llggHeight / 6 - lessEqDist) (symbolMid - llggHeight / 2) SB RightSB lesslessSW
			create-derived 'lesseqgreater' 0x22DA : glyph-proc
				include : LessShape (symbolMid + llggHeight / 2 + lessEqDist) (symbolMid - llggHeight / 6 + lessEqDist * 2) SB RightSB lesslessSW
				include : GreaterShape (symbolMid + llggHeight / 6 - lessEqDist * 2) (symbolMid - llggHeight / 2 - lessEqDist) SB RightSB lesslessSW
				include : HBar SB RightSB (symbolMid) lesslessSW
		create-glyph 'lessless' 0x226A : glyph-proc
			include : LessShape (symbolMid + dH) (symbolMid - dH) (SB - lessEqDist / 2) (RightSB - lessEqDist * 2) lesslessSW
			include : LessShape (symbolMid + dH) (symbolMid - dH) (SB + lessEqDist * 2) (RightSB + lessEqDist / 2) lesslessSW
		create-glyph 'greatergreater' 0x226B : glyph-proc
			include : GreaterShape (symbolMid + dH) (symbolMid - dH) (SB - lessEqDist / 2) (RightSB - lessEqDist * 2) lesslessSW
			include : GreaterShape (symbolMid + dH) (symbolMid - dH) (SB + lessEqDist * 2) (RightSB + lessEqDist / 2) lesslessSW

	define [PrecedesShapeA top bot l r s cth] : begin
		local fine : s * cth
		return : dispiro
			widths.center s
			g4 r top
			straight.left.end l ([mix top bot 0.5] + s / 2) [widths.heading fine 0 Leftward]
	define [PrecedesShapeB top bot l r s cth] : begin
		local fine : s * cth
		return : dispiro
			widths.center s
			g4 r bot
			straight.left.end l ([mix top bot 0.5] - s / 2) [widths.heading 0 fine Leftward]
	define [SucceedsShapeA top bot l r s cth] : begin
		local fine : s * cth
		return : dispiro
			widths.center s
			g4 l top
			straight.right.end r ([mix top bot 0.5] + s / 2) [widths.heading 0 fine Rightward]
	define [SucceedsShapeB top bot l r s cth] : begin
		local fine : s * cth
		return : dispiro
			widths.center s
			g4 l bot
			straight.right.end r ([mix top bot 0.5] - s / 2) [widths.heading fine 0 Rightward]

	define [PrecedesShape top bot l r s] : glyph-proc
		include : PrecedesShapeA top bot l r [fallback s OperatorStroke] CThin
		include : PrecedesShapeB top bot l r [fallback s OperatorStroke] CThin
	define [SucceedsShape top bot l r s] : glyph-proc
		include : SucceedsShapeA top bot l r [fallback s OperatorStroke] CThin
		include : SucceedsShapeB top bot l r [fallback s OperatorStroke] CThin

	create-glyph 'precedes' 0x227a : glyph-proc # precedes
		include : PrecedesShape (symbolMid + dH) (symbolMid - dH) SB RightSB

	create-glyph 'succeeds' 0x227b : glyph-proc # succeeds
		include : SucceedsShape (symbolMid + dH) (symbolMid - dH) SB RightSB

	create-glyph : glyph-proc # precedeseq
		include : PrecedesShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist) SB RightSB
		create-derived 'precedes.narrow' : glyph-proc
			include : Upright
			include : Translate 0 (-lessEqDist)
			include : Italify
		create-derived 'precedeseq' 0x2AAF : glyph-proc
			include : HBar SB RightSB (symbolMid - dH - lessEqDist) OperatorStroke
			create-derived 'precedeseqBarNegated' 0x2AB1 : BarNegator (symbolMid - dH) lessEqDist
		create-derived 'precedessym' 0x227E : glyph-proc
			include : symWave (symbolMid - dH - lessEqDist) 1
			create-derived 'precedessymBarNegated' 0x22E8 : BarNegator (symbolMid - dH) lessEqDist
		create-derived 'precedeseqslant' 0x227C : glyph-proc
			include : PrecedesShapeB (symbolMid + dH - lessEqDist) (symbolMid - dH - lessEqDist) SB RightSB OperatorStroke 1

	create-glyph : glyph-proc # succeedseq
		include : SucceedsShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist) SB RightSB
		create-derived 'succeeds.narrow' : glyph-proc
			include : Upright
			include : Translate 0 (-lessEqDist)
			include : Italify
		create-derived 'succeedseq' 0x2AB0 : glyph-proc
			include : HBar SB RightSB (symbolMid - dH - lessEqDist) OperatorStroke
			create-derived 'sycceedseqBarNegated' 0x2AB2 : BarNegator (symbolMid - dH) lessEqDist
		create-derived 'succeedssym' 0x227F : glyph-proc
			include : symWave (symbolMid - dH - lessEqDist) 1
			create-derived 'succeedssymBarNegated' 0x22E9 : BarNegator (symbolMid - dH) lessEqDist
		create-derived 'succeedseqslant' 0x227D : glyph-proc
			include : SucceedsShapeB (symbolMid + dH - lessEqDist) (symbolMid - dH - lessEqDist) SB RightSB OperatorStroke 1

	create-glyph 'sym' 0x223C : symWave symbolMid 1
	create-glyph 'flipsym' 0x223D : symWave symbolMid (-1)

	VDual 'approx' 0x2248 'sym' approxDist

	create-glyph : glyph-proc # aapprox
		include : symWave (symbolMid + approxDist) 1
		include : symWave symbolMid 1
		create-derived 'aapprox' 0x224B : symWave (symbolMid - approxDist) 1
		create-derived 'approxBar' 0x224A : HBar SB RightSB (symbolMid - approxDist) OperatorStroke

	create-glyph 'barSym' 0x2242 : glyph-proc # symbar
		include [refer-glyph 'sym'] AS_BASE
		include : Upright
		include : Translate 0 (-approxDist / 2)
		include : Italify
		include : HBar SB RightSB (symbolMid + approxDist / 2) OperatorStroke

	create-glyph 'symBar' 0x2243 : glyph-proc # symbar
		include [refer-glyph 'sym'] AS_BASE
		include : Upright
		include : Translate 0 (approxDist / 2)
		include : Italify
		include : HBar SB RightSB (symbolMid - approxDist / 2) OperatorStroke

	create-glyph 'symBarBar' 0x2245 : glyph-proc # symBarBar
		local sympShift : approxDist + EqualHalfSpace * 1.5
		include [refer-glyph 'sym'] AS_BASE
		include : Upright
		include : Translate 0 (sympShift / 2)
		include : Italify
		include : HBar SB RightSB (symbolMid - sympShift / 2 + EqualHalfSpace * 1.5) OperatorStroke
		include : HBar SB RightSB (symbolMid - sympShift / 2) OperatorStroke

	create-glyph 'flipsymBarBar' 0x224C : glyph-proc # flipsymBarBar
		local sympShift : approxDist + EqualHalfSpace * 1.5
		include [refer-glyph 'flipsym'] AS_BASE
		include : Upright
		include : Translate 0 (sympShift / 2)
		include : Italify
		include : HBar SB RightSB (symbolMid - sympShift / 2 + EqualHalfSpace * 1.5) OperatorStroke
		include : HBar SB RightSB (symbolMid - sympShift / 2) OperatorStroke

	define [SubsetShape top bot sw] : dispiro
		widths.lhs [fallback sw OperatorStroke]
		flat RightSB top [heading Leftward]
		curl (SB + (top - bot) / 2) top
		archv
		g4   SB [mix top bot 0.5]
		arcvh
		flat (SB + (top - bot) / 2) bot
		curl RightSB bot [heading Rightward]

	define [PrefixShape top bot sw] : union
		VBarLeft SB bot top [fallback sw OperatorStroke]
		HBarTop  SB RightSB top [fallback sw OperatorStroke]
		HBarBottom SB RightSB bot [fallback sw OperatorStroke]

	define [SupsetShape top bot sw] : glyph-proc
		include : SubsetShape top bot sw
		include : FlipAround Middle [mix top bot 0.5]

	define [SuffixShape top bot sw] : glyph-proc
		include : PrefixShape top bot sw
		include : FlipAround Middle [mix top bot 0.5]

	create-glyph 'subst' 0x2282 : glyph-proc # subst
		include : SubsetShape (symbolMid + dH) (symbolMid - dH)
	create-glyph 'supst' 0x2283 : glyph-proc # supst
		include : SupsetShape (symbolMid + dH) (symbolMid - dH)

	create-glyph : glyph-proc # substBar
		include : SubsetShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist)
		create-derived 'substBar' 0x2286 : glyph-proc
			include : HBar SB RightSB (symbolMid - dH - lessEqDist) OperatorStroke
			create-derived 'substBarNegated' 0x228A : BarNegator (symbolMid - dH) lessEqDist
		create-derived 'supstBar' 0x2287 : glyph-proc
			include : FlipAround Middle (symbolMid + lessEqDist)
			include : HBar SB RightSB (symbolMid - dH - lessEqDist) OperatorStroke
			create-derived 'supstBarNegated' 0x228B : BarNegator (symbolMid - dH) lessEqDist

	create-glyph 'element' 0x2208 : glyph-proc # element
		include : SubsetShape (symbolMid + dH * 4 / 3) (symbolMid - dH * 4 / 3)
		include : HBar (SB + HalfStroke) RightSB symbolMid

	turned nothing 0x220B 'element' Middle symbolMid

	create-glyph 'smallElement' 0x220A : glyph-proc # small element
		include [refer-glyph 'subst'] AS_BASE
		include : HBar (SB + HalfStroke) RightSB symbolMid OperatorStroke

	turned nothing 0x220D 'smallElement' Middle symbolMid

	create-glyph 'prefix' 0x228F : glyph-proc # prefix
		include : PrefixShape (symbolMid + dH) (symbolMid - dH)
	create-glyph 'suffix' 0x2290 : glyph-proc # suffix
		include : SuffixShape (symbolMid + dH) (symbolMid - dH)

	create-glyph : glyph-proc # substBar
		include : PrefixShape (symbolMid + dH + lessEqDist) (symbolMid - dH + lessEqDist)
		create-derived 'prefixBar' 0x2291 : glyph-proc
			include : HBar SB RightSB (symbolMid - dH - lessEqDist) OperatorStroke
			create-derived 'prefixBarNegated' 0x22E4 : BarNegator (symbolMid - dH) lessEqDist
		create-derived 'suffixBar' 0x2292 : glyph-proc
			include : FlipAround Middle (symbolMid + lessEqDist)
			include : HBar SB RightSB (symbolMid - dH - lessEqDist) OperatorStroke
			create-derived 'suffixBarNegated' 0x22E5 : BarNegator (symbolMid - dH) lessEqDist

	composite [refer-glyph 'element'] MarkSet.plus [refer-glyph 'underlineBelow'] [clear-anchors] [into-unicode 0x22F8]

glyph-block Symbol-Math-Complement : begin
	glyph-block-import Letter-Latin-C : CShape
	create-glyph 'complement' 0x2201 : glyph-proc # complement
		include : CShape [mix symbolMid operTop 1.1] [mix symbolMid operBot 1.1] OperatorStroke

glyph-block Symbol-Math-Negation : begin
	glyph-block-import NotGlyphFn : notGlyph
	notGlyph       null 0x2260 'equal'
	notGlyph       null 0x2262 'ident'
	notGlyph       null 0x22AC 'vdash'
	notGlyph       null 0x22AD 'tautology'
	notGlyph       null 0x22AE 'forces'
	notGlyph       null 0x22AF 'doubleForces'
	notGlyph.left  null 0x226E 'less'
	notGlyph.right null 0x226F 'greater'
	notGlyph.left  null 0x22EA 'normalSubsetOf'
	notGlyph.right null 0x22EB 'normalSupersetOf'
	notGlyph.left  null 0x2280 'precedes'
	notGlyph.right null 0x2281 'succeeds'
	notGlyph       null 0x2241 'sym' [mix symbolMid bgopTop 0.75] [mix symbolMid bgopBot 0.75]
	notGlyph       null 0x2244 'symBar' [mix symbolMid bgopTop 0.75] [mix symbolMid bgopBot 0.75]
	notGlyph       null 0x2247 'symBarBar'
	notGlyph       null 0x2249 'approx' [mix symbolMid bgopTop 0.75] [mix symbolMid bgopBot 0.75]
	notGlyph.left  null 0x2284 'subst'
	notGlyph.right null 0x2285 'supst'
	notGlyph.left  null 0x2288 'substBar'
	notGlyph.right null 0x2289 'supstBar'
	notGlyph.left  null 0x22E2 'prefixBar'
	notGlyph.right null 0x22E3 'suffixBar'
	notGlyph.left  null 0x2209 'element'
	notGlyph.right null 0x220C 'turnelement'
	notGlyph.left  null 0x2270 'lesseq'
	notGlyph.right null 0x2271 'greatereq'
	notGlyph.left  null 0x2274 'lesssym'
	notGlyph.right null 0x2275 'greatersym'
	notGlyph.left  null 0x22EC 'normalSubsetEq'
	notGlyph.right null 0x22ED 'normalSupersetEq'
	notGlyph.left  null 0x22E0 'precedeseqslant'
	notGlyph.right null 0x22E1 'succeedseqslant'
	notGlyph       null 0x2278 'lessgreater'
	notGlyph       null 0x2279 'greaterless'
	notGlyph.right null 0x2204 'exists' (CAP - Descender / 2) (Descender / 2) 0.4

glyph-block Symbol-Math-Large-Operators : for-width-kinds WideWidth1
	glyph-block-import CommonShapes
	glyph-block-import Letter-Latin-Lower-F : LongSShape
	glyph-block-import Letter-Latin-Upper-U : UShape
	glyph-block-import Letter-Greek-Upper-Sigma : SigmaShape
	glyph-block-import Letter-Greek-Pi : PiShape

	define diversityLargeOperators : Math.max para.diversityM (MosaicWidth / Width)
	define df : DivFrame diversityLargeOperators 0 [if FMosaicWide diversityLargeOperators 1]

	create-glyph [MangleName 'sum'] [MangleUnicode 0x2211] : glyph-proc # sum
		set-width df.width
		include : SigmaShape df bgopTop bgopBot OperatorStroke

	create-glyph [MangleName 'product'] [MangleUnicode 0x220F] : glyph-proc # product
		set-width df.width
		include : PiShape bgopTop bgopBot (shrinkrate -- 0) (_fine -- OperatorStroke) (df -- df)

	turned [MangleName 'coproduct'] [MangleUnicode 0x2210] [MangleName 'product'] df.middle symbolMid

	create-glyph [MangleName 'Vee'] [MangleUnicode 0x22C1] : glyph-proc # Vee
		set-width df.width
		include : dispiro
			widths.center OperatorStroke
			flat df.leftSB bgopTop
			curl df.middle bgopBot [heading Downward]
		include : dispiro
			widths.center OperatorStroke
			flat df.rightSB bgopTop
			curl df.middle bgopBot [heading Downward]

	turned [MangleName 'Wedge'] [MangleUnicode 0x22C0] [MangleName 'Vee'] df.middle symbolMid

	create-glyph [MangleName 'Cup'] [MangleUnicode 0x22C3] : glyph-proc # Cup
		set-width df.width
		include : UShape df bgopTop bgopBot OperatorStroke true

	turned [MangleName 'Cap'] [MangleUnicode 0x22C2] [MangleName 'Cup'] df.middle symbolMid

glyph-block Symbol-Math-Integrals : begin
	glyph-block-import CommonShapes
	glyph-block-import Letter-Latin-Lower-F : LongSShape

	define MosaicTop    fontMetrics.OS_2.sTypoAscender
	define MosaicBottom fontMetrics.OS_2.sTypoDescender
	define MosaicHeight : MosaicTop - MosaicBottom

	create-glyph 'integrate' 0x222B : glyph-proc # integrate
		include : LongSShape bgopTop bgopBot Hook (Hook * 0.75) OperatorStroke

	HDual 'doubleintegrate' 0x222C 'integrate' (0.5 * Width)

	create-glyph 'integralUpper' 0x2320 : glyph-proc
		include : intersection
			Rect MosaicTop MosaicBottom (-Width) (2 * Width)
			LongSShape bgopTop (bgopBot - MosaicHeight * 2) Hook (Hook * 0.75) OperatorStroke

	create-glyph 'integralExtension' 0x23AE : glyph-proc
		include : intersection
			Rect MosaicTop MosaicBottom (-Width) (2 * Width)
			LongSShape (bgopTop + MosaicHeight) (bgopBot - MosaicHeight) Hook (Hook * 0.75) OperatorStroke

	create-glyph 'integralLower' 0x2321 : glyph-proc
		include : intersection
			Rect MosaicTop MosaicBottom (-Width) (2 * Width)
			LongSShape (bgopTop + MosaicHeight * 2) bgopBot Hook (Hook * 0.75) OperatorStroke

	create-glyph 'tripleintegrate' 0x222D : glyph-proc
		define [shape] : LongSShape bgopTop bgopBot Hook (Hook * 0.75) [adviceBlackness 3.75]
		include [shape]
		include : Translate (-Width / 3) 0
		include [shape]
		include : Translate (-Width / 3) 0
		include [shape]
		include : Translate (Width / 3) 0

	create-glyph 'ringintegrate' 0x222E : glyph-proc # ringintegrate
		include : refer-glyph "integrate"
		include : OShape (symbolMid + (RightSB - SB) / 2) (symbolMid - (RightSB - SB) / 2) SB RightSB OperatorStroke

glyph-block Symbol-Math-APL : begin
	glyph-block-import CommonShapes
	glyph-block-import Letter-Latin-Upper-U : UShape

	define aplBoxInnerTop bgopTop
	define aplBoxInnerBot bgopBot
	define aplBoxSW : adviceBlackness 4.5
	define aplBoxTop : mix symbolMid aplBoxInnerTop 1.1
	define aplBoxBot : mix symbolMid aplBoxInnerBot 1.1
	define aplBoxInnerScale : Math.min ((Width - aplBoxSW * 1.75) / Width) ((aplBoxInnerTop - aplBoxInnerBot) / (parenTop - parenBot))

	create-glyph 'aplsquare' 0x2395 : glyph-proc # aplsquare
		local l [mix 0 SB (1 / 3)]
		local r [mix Width RightSB (1 / 3)]
		include : HBarTop    l r aplBoxTop aplBoxSW
		include : HBarBottom l r aplBoxBot aplBoxSW
		include : VBarLeft   l aplBoxTop aplBoxBot aplBoxSW
		include : VBarRight  r aplBoxTop aplBoxBot aplBoxSW

	create-glyph 'aplsquareShadow' : glyph-proc # aplsquareShadow
		local l [mix 0 SB (1 / 3)]
		local r [mix Width RightSB (1 / 3)]
		include : spiro-outline
			corner l aplBoxTop
			corner r aplBoxTop
			corner r aplBoxBot
			corner l aplBoxBot

	create-glyph 'aplibar' 0x2336 : glyph-proc # aplibar
		local l [mix 0 SB (1 / 3)]
		local r [mix Width RightSB (1 / 3)]
		include : HBarTop    l r operTop aplBoxSW
		include : HBarBottom l r operBot aplBoxSW
		include : VBar    Middle operTop operBot aplBoxSW

	create-glyph 'aplsquish' 0x2337 : glyph-proc # aplsquish
		local l : mix SB RightSB (1 / 8)
		local r : mix RightSB SB (1 / 8)
		include : union
			HBarTop    l r aplBoxTop aplBoxSW
			HBarBottom l r aplBoxBot aplBoxSW
			VBarLeft   l aplBoxTop aplBoxBot aplBoxSW
			VBarRight  r aplBoxTop aplBoxBot aplBoxSW

	create-glyph 'aplbar' : glyph-proc # aplbar
		include : VBar Middle aplBoxTop aplBoxBot aplBoxSW

	create-glyph 'aplLongBar' : glyph-proc # aplLongBar
		include : VBar Middle aplBoxTop aplBoxBot aplBoxSW

	create-glyph 'aplminus' : glyph-proc # aplminus
		include : dispiro
			widths.center aplBoxSW
			flat RightSB  [mix operTop operBot 0.5]
			curl SB       [mix operTop operBot 0.5]

	create-glyph 'aplslash' : glyph-proc # aplslash
		include : dispiro
			widths.center aplBoxSW
			flat RightSB  operTop
			curl SB       operBot

	create-glyph 'aplbackslash' : glyph-proc # aplbackslash
		include : dispiro
			widths.center aplBoxSW
			flat SB       operTop
			curl RightSB  operBot

	define [aplBoxed shape] : Overlay [refer-glyph 'aplsquare'] : glyph-proc
		include : intersection [refer-glyph 'aplsquareShadow'] shape
		include : ScaleAround Middle symbolMid aplBoxInnerScale

	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'equal'] [into-unicode 0x2338]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'divide'] [into-unicode 0x2339]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'whitediamond.NWID'] [into-unicode 0x233A]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'smallwhitecircle.NWID'] [into-unicode 0x233B]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'whitecircle.NWID'] [into-unicode 0x233C]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'aplbar'] [refer-glyph 'whitecircle.NWID']] [into-unicode 0x233D]
	composite [refer-glyph 'whitecircle.NWID'] [refer-glyph 'smallwhitecircle.NWID'] [into-unicode 0x233E]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'aplminus'] [refer-glyph 'slash']] [into-unicode 0x233F]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'aplminus'] [refer-glyph 'backslash']] [into-unicode 0x2340]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'slash'] [into-unicode 0x2341]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'backslash'] [into-unicode 0x2342]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'less'] [into-unicode 0x2343]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'greater'] [into-unicode 0x2344]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'arrowleft.NWID'] [refer-glyph 'aplbar']] [into-unicode 0x2345]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'arrowright.NWID'] [refer-glyph 'aplbar']] [into-unicode 0x2346]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'arrowleft.NWID'] [into-unicode 0x2347]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'arrowright.NWID'] [into-unicode 0x2348]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'aplbackslash'] [refer-glyph 'whitecircle.NWID']] [into-unicode 0x2349]
	composite [refer-glyph 'bot'] MarkSet.tack [refer-glyph 'underlineBelow'] [clear-anchors] [into-unicode 0x234A]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'increment'] [refer-glyph 'aplLongBar']] [into-unicode 0x234B]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'vee'] [into-unicode 0x234C]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'increment'] [into-unicode 0x234D]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'arrowup.NWID'] [refer-glyph 'minus']] [into-unicode 0x234F]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'arrowup.NWID'] [into-unicode 0x2350]
	composite [refer-glyph 'top'] MarkSet.tack [refer-glyph 'sbOverlineAbove'] [clear-anchors] [into-unicode 0x2351]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'nabla'] [refer-glyph 'aplLongBar']] [into-unicode 0x2352]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'wedge'] [into-unicode 0x2353]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'nabla'] [into-unicode 0x2354]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'arrowdown.NWID'] [refer-glyph 'minus']] [into-unicode 0x2356]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'arrowdown.NWID'] [into-unicode 0x2357]
	composite [refer-glyph 'singleQuote'] MarkSet.plus [refer-glyph 'underlineBelow'] [clear-anchors] [into-unicode 0x2358]
	composite [refer-glyph 'increment'] [refer-glyph 'underlineBelow'] [into-unicode 0x2359]
	composite [refer-glyph 'whitediamond.NWID'] MarkSet.plus [refer-glyph 'underlineBelow'] [clear-anchors] [into-unicode 0x235A]
	composite [refer-glyph 'smallwhitecircle.NWID'] MarkSet.plus [refer-glyph 'underlineBelow'] [clear-anchors] [into-unicode 0x235B]
	composite [refer-glyph 'whitecircle.NWID'] MarkSet.plus [refer-glyph 'underlineBelow'] [clear-anchors] [into-unicode 0x235C]
	composite
		refer-glyph 'smallwhitecircle.NWID'
		ScaleAround Middle symbolMid 0.75
		Realign Middle symbolMid Middle (operBot + Smooth)
		UShape [DivFrame 1] operTop operBot [adviceBlackness 5] true
		FlipAround Middle symbolMid
		into-unicode 0x235D
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'singleQuote'] [into-unicode 0x235E]
	composite [refer-glyph 'enquad'] [intersection [refer-glyph 'mathOOutline'] [refer-glyph 'opAsterisk.low']] [refer-glyph 'mathO'] [into-unicode 0x235F]
	composite [refer-glyph 'enquad'] [aplBoxed : composite [refer-glyph 'colon'] [Realign Middle (XH/2) Middle symbolMid]] [into-unicode 0x2360]
	composite [refer-glyph 'top'] MarkSet.tack [refer-glyph 'dieresisAbove'] [clear-anchors] [into-unicode 0x2361]
	composite [refer-glyph 'nabla'] [refer-glyph 'dieresisAbove'] [into-unicode 0x2362]
	composite [refer-glyph 'asterisk.low'] MarkSet.plus [refer-glyph 'dieresisAbove'] [clear-anchors] [into-unicode 0x2363]
	composite [refer-glyph 'smallwhitecircle.NWID'] MarkSet.plus [refer-glyph 'dieresisAbove'] [clear-anchors] [into-unicode 0x2364]
	composite [refer-glyph 'whitecircle.NWID'] MarkSet.plus [refer-glyph 'dieresisAbove'] [clear-anchors] [into-unicode 0x2365]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'cup'] [refer-glyph 'aplbar']] [into-unicode 0x2366]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'subst'] [refer-glyph 'aplbar']] [into-unicode 0x2367]
	composite [refer-glyph 'asciiTilde.low'] [refer-glyph 'dieresisAbove'] [into-unicode 0x2368]
	composite [refer-glyph 'greater.narrow'] MarkSet.plus [refer-glyph 'dieresisAbove'] [clear-anchors] [into-unicode 0x2369]
	composite [refer-glyph 'minus'] [refer-glyph 'comma'] [into-unicode 0x236A]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'overlayTildeOperator'] [refer-glyph 'nabla']] [into-unicode 0x236B]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'overlayTildeOperator'] [refer-glyph 'zero.lnum.unslashed']] [into-unicode 0x236C]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'overlayTildeOperator'] [refer-glyph 'bar']] [into-unicode 0x236D]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'semicolon'] [refer-glyph 'underscore.high']] [into-unicode 0x236E]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'notequal'] [into-unicode 0x236F]
	composite [refer-glyph 'enquad'] [aplBoxed : refer-glyph 'question'] [into-unicode 0x2370]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'overlayTildeOperator'] [refer-glyph 'vee']] [into-unicode 0x2371]
	composite [refer-glyph 'enquad'] [Overlay [refer-glyph 'overlayTildeOperator'] [refer-glyph 'wedge']] [into-unicode 0x2372]
	alias 'apliota'  0x2373 'iota'
	alias 'aplrho'   0x2374 'rho'
	alias 'aplomega' 0x2375 'omega'
	composite [refer-glyph 'alpha'] [refer-glyph 'underlineBelow'] [clear-anchors] [into-unicode 0x2376]
	composite [refer-glyph 'smallElement'] MarkSet.plus [refer-glyph 'underlineBelow'] [clear-anchors] [into-unicode 0x2377]
	composite [refer-glyph 'iota'] [refer-glyph 'underlineBelow'] [clear-anchors] [into-unicode 0x2378]
	composite [refer-glyph 'omega'] [refer-glyph 'underlineBelow'] [clear-anchors] [into-unicode 0x2379]
	alias 'aplalpha' 0x237A 'alpha'

glyph-block Symbol-Math-Other : begin
	glyph-block-import CommonShapes : alias turned
	glyph-block-import NotGlyphFn : notGlyph

	alias 'mathbullet' 0x2219 'bullet'
	alias 'mathbar' 0x2223 'bar'
	notGlyph null 0x2224 'mathbar' [mix symbolMid bgopTop 0.5] [mix symbolMid bgopBot 0.5] 0.1
	notGlyph null 0x2226 'parallel' [mix symbolMid bgopTop 0.5] [mix symbolMid bgopBot 0.5] 0
	alias 'mathsmallcircle' 0x2218 'smallwhitecircle.NWID'
	alias 'whiteDiamondOperator' 0x22C4 'whitediamond.NWID'
	alias 'mathstar' 0x22C6 'blackstar.NWID'
	turned 'amalg' 0x2A3F 'Pi' Middle (CAP / 2)
	turned 'turnAmpersand' 0x214B 'ampersand' Middle (CAP / 2)
	turned nothing 0x22DC 'greatereq' Middle symbolMid
	turned nothing 0x22DD 'lesseq' Middle symbolMid
	turned nothing 0x22DE 'succeedseqslant' Middle symbolMid
	turned nothing 0x22DF 'precedeseqslant' Middle symbolMid

	create-glyph 'sqrt' 0x221A : glyph-proc # sqrt
		include : dispiro
			widths.center OperatorStroke
			flat SB [mix parenBot parenTop 0.45]
			curl Middle parenBot [heading Downward]
		include : dispiro
			widths.center OperatorStroke
			flat Width parenTop
			curl Middle parenBot [heading Downward]
