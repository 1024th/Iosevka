$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import [Dotless CvDecompose] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-W : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	define FORM-CURLY      0
	define FORM-STRAIGHT   1
	define FORM-FLAT-TOP   2
	define FORM-DOUBLE-V   3
	define FORM-ASYMMETRIC 4

	define SERIFS-AUTO    1
	define SERIFS-MOTION  2

	define CwFineOuter           5.0
	define CwFineInner           6.0
	define CwFineOuterStraight   5.5
	define CwFineInnerStraight   5.5
	define CwFineInnerDoubleV    4.25
	define CwOuterStrokeStraight 3.0
	define CwDoubleV             3.625
	define CwWCoCurly            5.0
	define CwWCoStraight         3.5
	define CwWCoDoubleV          3.5
	define PXBot1Curly           0.25
	define PXBot1Straight        0.235

	define [WDim df top bodyType] : begin
		local strokeOuter : match bodyType
			[Just FORM-CURLY]      : AdviceStroke CwOuterStrokeStraight [Math.sqrt df.div]
			[Just FORM-STRAIGHT]   : AdviceStroke CwOuterStrokeStraight [Math.sqrt df.div]
			[Just FORM-FLAT-TOP]   : AdviceStroke CwOuterStrokeStraight [Math.sqrt df.div]
			[Just FORM-DOUBLE-V]   : AdviceStroke CwDoubleV [Math.sqrt df.div]
			[Just FORM-ASYMMETRIC] : AdviceStroke CwDoubleV [Math.sqrt df.div]
		local fineOuter : match bodyType
			[Just FORM-CURLY]      : AdviceStroke CwFineOuter df.div
			[Just FORM-STRAIGHT]   : AdviceStroke CwFineOuterStraight [Math.sqrt df.div]
			[Just FORM-FLAT-TOP]   : AdviceStroke CwFineOuterStraight [Math.sqrt df.div]
			[Just FORM-DOUBLE-V]   : AdviceStroke CwDoubleV [Math.sqrt df.div]
			[Just FORM-ASYMMETRIC] : AdviceStroke CwDoubleV [Math.sqrt df.div]
		local fineInner : match bodyType
			[Just FORM-CURLY]      : AdviceStroke CwFineInner          df.div
			[Just FORM-STRAIGHT]   : AdviceStroke CwFineInnerStraight [Math.sqrt df.div]
			[Just FORM-FLAT-TOP]   : AdviceStroke CwFineInnerStraight [Math.sqrt df.div]
			[Just FORM-DOUBLE-V]   : AdviceStroke CwFineInnerDoubleV  [Math.sqrt df.div]
			[Just FORM-ASYMMETRIC] : AdviceStroke CwDoubleV  [Math.sqrt df.div]
		local fineHeight : (fineOuter + fineInner) / 2

		local wCo : match bodyType
			[Just FORM-CURLY]      : AdviceStroke CwWCoCurly    df.div
			[Just FORM-STRAIGHT]   : AdviceStroke CwWCoStraight df.div
			[Just FORM-FLAT-TOP]   : AdviceStroke CwWCoStraight df.div
			[Just FORM-DOUBLE-V]   : AdviceStroke CwWCoDoubleV df.div
			[Just FORM-ASYMMETRIC] : AdviceStroke CwWCoDoubleV df.div
		local kWCoShrink CThin
		local pxBot1 : match bodyType
			[Just FORM-CURLY]        0.25
			[Just FORM-STRAIGHT]     0.235
			[Just FORM-FLAT-TOP]     0.235
			[Just FORM-DOUBLE-V]     0.315
			[Just FORM-ASYMMETRIC]   0.3

		local botMixOffset : 0.5 * HVContrast * wCo
		local xBot1 : [if bodyType O 0] + [mix (df.leftSB + botMixOffset) (df.rightSB - botMixOffset) pxBot1]
		local xBot2 : df.width - xBot1
		local topWithoutSerif : if SLAB (top - Stroke) top
		local wMidHeight : match bodyType
			[Just FORM-CURLY]      : top * 0.6
			[Just FORM-STRAIGHT]   : topWithoutSerif * [Math.min 1 ([Math.pow df.div 1.5] * 0.72)]
			[Just FORM-FLAT-TOP]     topWithoutSerif
			[Just FORM-DOUBLE-V]     topWithoutSerif
			[Just FORM-ASYMMETRIC]   topWithoutSerif

		local xRight1 : match bodyType
			([Just FORM-DOUBLE-V] || [Just FORM-ASYMMETRIC]) : mix (df.leftSB + botMixOffset) (df.rightSB - botMixOffset) (2 * pxBot1)
			__                                             : if (bodyType < FORM-DOUBLE-V) df.middle
		local xLeft2  : df.width - xRight1

		local corWCo : DiagCorDs wMidHeight (xRight1 - xBot1) wCo
		local wCoCr : corWCo * wCo

		local corFOuter : DiagCorDs top (xBot1 - df.leftSB) fineOuter
		local fineOuterCr : Math.min (kWCoShrink * wCoCr) : corFOuter * fineOuter
		local strokeOuterCr : corFOuter * strokeOuter

		local corFInner : DiagCorDs wMidHeight (xRight1 - xBot1) fineInner
		local fineInnerCr : Math.min wCoCr : corFInner * fineInner
		local fineInnerCrTop : if (bodyType === FORM-DOUBLE-V || bodyType === FORM-ASYMMETRIC) fineInnerCr (kWCoShrink * wCoCr)

		return : object xBot1 xBot2 strokeOuter strokeOuterCr fineOuter fineOuterCr fineInner fineInnerCr fineInnerCrTop fineHeight wMidHeight xRight1 xLeft2 wCoCr

	### W and w
	define [WshapeImpl df top bodyType slabType] : glyph-proc
		local dim : WDim df top bodyType

		if bodyType : begin
			include : tagged 'strokeDown1' : dispiro
				widths.lhs dim.strokeOuterCr
				flat (df.leftSB + O * 2) top [heading Downward]
				g4   (dim.xBot1 - 0.5 * HVContrast * dim.wCoCr) 0 [widths.lhs.heading dim.fineOuterCr Downward]
		: else : begin
			include : tagged 'strokeDown1' : dispiro
				widths.lhs dim.strokeOuter
				flat df.leftSB top [heading Downward]
				curl df.leftSB (top * 0.75) [heading Downward]
				quadcontrols 0 0.3 6 unimportant
				g4   (dim.xBot1 - 0.5 * HVContrast * dim.wCoCr) 0 [widths.lhs.heading dim.fineOuterCr Downward]

		local kTopShift : if (bodyType === FORM-DOUBLE-V || bodyType === FORM-ASYMMETRIC) 0 1
		local k1 0.5
		local k2 : 1 - k1
		local shiftT  : kTopShift * HVContrast * (0.5 * dim.wCoCr - 0.5 * dim.fineInnerCrTop)
		local shiftB  :             HVContrast * (0.5 * dim.wCoCr - 0.5 * dim.fineOuterCr   )

		include : tagged 'strokeUp1' : difference
			dispiro
				flat (dim.xRight1 - shiftT) dim.wMidHeight [widths.center.heading dim.fineInnerCrTop Downward]
				curl (dim.xBot1 + shiftB)   0              [widths.center.heading dim.fineOuterCr    Downward]
			if (bodyType !== FORM-ASYMMETRIC) [glyph-proc] : spiro-outline
				corner dim.xLeft2 dim.wMidHeight
				corner dim.xBot2  0
				corner df.width  0
				corner df.width  dim.wMidHeight

		include : tagged 'strokeDown2' : dispiro
			flat (dim.xLeft2 + shiftT) dim.wMidHeight [widths.center.heading dim.fineInnerCrTop Downward]
			curl (dim.xBot2 - shiftB)   0             [widths.center.heading dim.fineOuterCr    Downward]

		if bodyType : begin
			include : tagged 'strokeUp2' : dispiro
				widths.rhs dim.strokeOuterCr
				flat (df.rightSB - O * 2) top [heading Downward]
				g4   (dim.xBot2 + 0.5 * HVContrast * dim.wCoCr) 0 [widths.rhs.heading dim.fineOuterCr Downward]
		: else : begin
			include : tagged 'strokeUp2' : dispiro
				widths.rhs dim.strokeOuter
				flat df.rightSB top [heading Downward]
				curl df.rightSB (top * 0.75) [heading Downward]
				quadcontrols 0 0.3 6 unimportant
				g4   (dim.xBot2 + 0.5 * HVContrast * dim.wCoCr) 0 [widths.rhs.heading dim.fineOuterCr Downward]

		include : match slabType
			[Just SERIFS-AUTO]   : AIVSerifs top df.leftSB df.rightSB
			[Just SERIFS-MOTION] : tagged 'serifLT' : LeftwardTopSerif df.leftSB top SideJut

	define [WonOverlay df] : glyph-proc
		include : HOverlayBar [mix SB 0 0.7] [mix df.rightSB df.width 0.7] (CAP * 0.6)
		include : HOverlayBar [mix SB 0 0.7] [mix df.rightSB df.width 0.7] (CAP * 0.35)

	create-glyph : glyph-proc
		local df : DivFrame para.diversityM 3
		set-width df.width
		include : df.markSet.capital
		create-derived 'W.straightAsymmetric'              : WshapeImpl df CAP FORM-ASYMMETRIC   SERIFS-AUTO
		create-derived 'W.straightDoubleV'                 : WshapeImpl df CAP FORM-DOUBLE-V     SERIFS-AUTO
		create-derived 'W.straightFlatTop'                 : WshapeImpl df CAP FORM-FLAT-TOP     SERIFS-AUTO
		create-derived 'W.straight'                        : WshapeImpl df CAP FORM-STRAIGHT     SERIFS-AUTO
		create-derived 'W.curly'                           : WshapeImpl df CAP FORM-CURLY        SERIFS-AUTO
		create-derived 'W.straightAsymmetricMotionSerifed' : WshapeImpl df CAP FORM-ASYMMETRIC   SERIFS-MOTION
		create-derived 'W.straightDoubleVMotionSerifed'    : WshapeImpl df CAP FORM-DOUBLE-V     SERIFS-MOTION
		create-derived 'W.straightFlatTopMotionSerifed'    : WshapeImpl df CAP FORM-FLAT-TOP     SERIFS-MOTION
		create-derived 'W.straightMotionSerifed'           : WshapeImpl df CAP FORM-STRAIGHT     SERIFS-MOTION
		create-derived 'W.curlyMotionSerifed'              : WshapeImpl df CAP FORM-CURLY        SERIFS-MOTION

	create-glyph : glyph-proc
		local df : DivFrame para.diversityM 3
		set-width df.width
		include : df.markSet.e
		create-derived 'w.straightAsymmetric'              : WshapeImpl df XH FORM-ASYMMETRIC   SERIFS-AUTO
		create-derived 'w.straightDoubleV'                 : WshapeImpl df XH FORM-DOUBLE-V     SERIFS-AUTO
		create-derived 'w.straightFlatTop'                 : WshapeImpl df XH FORM-FLAT-TOP     SERIFS-AUTO
		create-derived 'w.straight'                        : WshapeImpl df XH FORM-STRAIGHT     SERIFS-AUTO
		create-derived 'w.curly'                           : WshapeImpl df XH FORM-CURLY        SERIFS-AUTO
		create-derived 'w.straightAsymmetricMotionSerifed' : WshapeImpl df XH FORM-ASYMMETRIC   SERIFS-MOTION
		create-derived 'w.straightDoubleVMotionSerifed'    : WshapeImpl df XH FORM-DOUBLE-V     SERIFS-MOTION
		create-derived 'w.straightFlatTopMotionSerifed'    : WshapeImpl df XH FORM-FLAT-TOP     SERIFS-MOTION
		create-derived 'w.straightMotionSerifed'           : WshapeImpl df XH FORM-STRAIGHT     SERIFS-MOTION
		create-derived 'w.curlyMotionSerifed'              : WshapeImpl df XH FORM-CURLY        SERIFS-MOTION

	define [WHooktopShape df top bodyType] : glyph-proc
		include : WshapeImpl df top bodyType SERIFS-AUTO

		local dim : WDim df top bodyType

		# Eject unnecessary contours
		eject-contour 'strokeUp2'
		if SLAB : eject-contour 'serifRT'

		include : dispiro
			widths.rhs dim.strokeOuter
			straight.down.start df.rightSB (top - Hook) [heading Downward]
			quadcontrols 0 0.3 6 unimportant
			g4 (dim.xBot2 + 0.5 * HVContrast * dim.wCoCr) 0 [widths.rhs.heading dim.fineOuterCr Downward]

		include : VerticalHook (df.rightSB - HalfStroke * HVContrast) (top - Hook) (HookX * 0.65) (-Hook + HalfStroke)

	create-glyph : glyph-proc
		local df : DivFrame para.diversityM 3
		set-width df.width
		include : df.markSet.capital
		create-derived 'Whooktop.straightFlatTop' : WHooktopShape df CAP FORM-FLAT-TOP
		create-derived 'Whooktop.straight'        : WHooktopShape df CAP FORM-STRAIGHT
		create-derived 'Whooktop.curly'           : WHooktopShape df CAP FORM-CURLY

	create-glyph : glyph-proc
		local df : DivFrame para.diversityM 3
		set-width df.width
		include : df.markSet.e
		create-derived 'whooktop.straightFlatTop' : WHooktopShape df XH FORM-FLAT-TOP
		create-derived 'whooktop.straight'        : WHooktopShape df XH FORM-STRAIGHT
		create-derived 'whooktop.curly'           : WHooktopShape df XH FORM-CURLY

	define [LowerWWShape df straightBar slabType] : glyph-proc
		include : WshapeImpl df (CAP / 2) straightBar slabType
		include : Upright
		include : Translate 0 (CAP / 2)
		include : Italify
		include : WshapeImpl df (CAP / 2) straightBar slabType

	create-glyph : glyph-proc
		local df : DivFrame 1 3
		set-width df.width
		include : df.markSet.capital
		create-derived 'ww.straightAsymmetric'              : LowerWWShape df FORM-ASYMMETRIC     SERIFS-AUTO
		create-derived 'ww.straightDoubleV'                 : LowerWWShape df FORM-DOUBLE-V       SERIFS-AUTO
		create-derived 'ww.straightFlatTop'                 : LowerWWShape df FORM-FLAT-TOP       SERIFS-AUTO
		create-derived 'ww.straight'                        : LowerWWShape df FORM-STRAIGHT       SERIFS-AUTO
		create-derived 'ww.curly'                           : LowerWWShape df FORM-CURLY          SERIFS-AUTO
		create-derived 'ww.straightAsymmetricMotionSerifed' : LowerWWShape df FORM-ASYMMETRIC     SERIFS-MOTION
		create-derived 'ww.straightDoubleVMotionSerifed'    : LowerWWShape df FORM-DOUBLE-V       SERIFS-MOTION
		create-derived 'ww.straightFlatTopMotionSerifed'    : LowerWWShape df FORM-FLAT-TOP       SERIFS-MOTION
		create-derived 'ww.straightMotionSerifed'           : LowerWWShape df FORM-STRAIGHT       SERIFS-MOTION
		create-derived 'ww.curlyMotionSerifed'              : LowerWWShape df FORM-CURLY          SERIFS-MOTION

	select-variant 'W' 'W'
	select-variant 'Whooktop' 0x2C72
	select-variant 'w' 'w'
	select-variant 'ww' 0x2AC (follow -- 'w')
	select-variant 'whooktop' 0x2C73
	alias 'cyrl/We' 0x51C 'W'
	alias 'cyrl/we' 0x51D 'w'
	turned 'turnw' 0x28D 'w' (Middle * para.diversityM) (XH / 2)

	with-related-glyphs 'symbols/currency/wonSign' 0x20A9 'W' : lambda [src sel] : glyph-proc
		local df : DivFrame para.diversityM 3
		include [refer-glyph src] AS_BASE ALSO_METRICS
		include [WonOverlay df]

	glyph-block-import Letter-Blackboard : BBS BBD
	glyph-block-import Letter-Latin-V : BBVShape BBVOuterMaskShape

	define [BBWShape top] : begin
		local offset : BBD * 2
		local ksW : [AdviceStroke2 8 2 top] / BBS
		local kdW : Math.min ksW (3 / 4)
		return : union
			difference
				BBVShape SB (RightSB - offset) kdW ksW top
				BBVOuterMaskShape (SB + offset) RightSB kdW ksW top
			BBVShape (SB + offset) RightSB kdW ksW top

	create-glyph 'mathbb/W' 0x1D54E : composite-proc [MarkSet.capital] [BBWShape CAP]
	create-glyph 'mathbb/w' 0x1D568 : composite-proc [MarkSet.e]       [BBWShape XH]