import 'typo-geom' as TypoGeom
import '../support/curve-util' as CurveUtil

export : define [SetupBuilders args] : begin
	define [object Glyph GlobalTransform] args
	define [Boole operator] : begin
		define [BooleImplFn] : begin
			define k : {}.slice.call arguments 0
			return : lambda [dontinc] : begin
				local g : new Glyph
				set g.gizmo : this.gizmo || GlobalTransform
				if (k.length == 0) : return g

				local contourArcs : getArcsFromProc this k.0
				foreach [item : items-of : k.slice 1] : begin
					set contourArcs : TypoGeom.Boolean.combine operator
						begin contourArcs
						getArcsFromProc this item
						begin TypoGeom.Boolean.PolyFillType.pftNonZero
						begin TypoGeom.Boolean.PolyFillType.pftNonZero
						begin CurveUtil.BOOLE_RESOLUTION

				local ctx : new CurveUtil.BezToContoursSink
				TypoGeom.ShapeConv.transferBezArcShape contourArcs ctx
				set g.contours ctx.contours
				this.includeGlyph g
				return g

	define [getArcsFromProc g p] : begin
		local g1 : new Glyph
		set g1.gizmo : g.gizmo || GlobalTransform
		g1.include p
		return : CurveUtil.convertShapeToArcs g1.contours

	define union : Boole TypoGeom.Boolean.ClipType.ctUnion
	define intersection : Boole TypoGeom.Boolean.ClipType.ctIntersection
	define difference : Boole TypoGeom.Boolean.ClipType.ctDifference

	return [object union intersection difference]
