import [add-common-feature add-feature add-lookup ChainRuleBuilder] from "./table-util"

define-operator "~>" 880 'right' : syntax-rules
	`(@l ~> @r) `{.left @l .right @r}

export : define [buildCCMP sink glyphs markGlyphs] : begin
	define ccmp : add-feature sink 'ccmp'
	define {chain-rule} : ChainRuleBuilder sink

	define groupTR {}
	define groupLF {}
	define dotlessFrom {}
	define dotlessTo   {}
	foreach [{gid, g} : pairs-of glyphs] : if (gid.(0) !== ".") : begin
		if g.anchors.trailing : groupTR.push gid
		if g.anchors.lf       : groupLF.push gid
		if (g.related && g.related.dotless) : begin
			dotlessFrom.push gid
			dotlessTo.push   g.related.dotless

	define [IotaLF]         : {'iotaBelow'} ~> {'iotaLF'}
	define [OgonekTrailing] : {'ogonekBelow'} ~> {'ogonekTR'}

	define [ToneToToneStart toneEnd] : begin
		local f {}
		local e {}
		foreach toneStart [range 4 downtill 0] : begin
			f.push ('tone' + toneStart)
			e.push ('toneStart' + toneStart + toneEnd)
		return (f ~> e)

	define [ToneToToneEnd toneStart] : begin
		local f {}
		local e {}
		foreach toneEnd [range 4 downtill 0] : begin
			f.push ('tone' + toneEnd)
			e.push ('toneEnd' + toneStart + toneEnd)
		return (f ~> e)

	define [toneStartOrMidAt y]: begin
		local f {}
		foreach toneEnd [range 4 downtill 0] : begin
			f.push ('toneStart' + y + toneEnd)
		foreach toneStart [range 4 downtill 0] : foreach toneEnd [range 4 downtill 0] : begin
			f.push ('toneMid' + toneStart + y + toneEnd)
		return f

	define [ToneStartToToneMid toneStart] : begin
		local f {}
		local e {}
		foreach toneMid [range 4 downtill 0] : foreach toneEnd [range 4 downtill 0] : begin
			f.push ('toneStart' + toneMid + toneEnd)
			e.push ('toneMid' + toneStart + toneMid + toneEnd)
		return (f ~> e)

	define lookupCcmp1 : add-lookup sink : object
		.type 'gsub_chaining'
		.subtables : list
			# Dot removal (max 6 middle marks are supported)
			chain-rule (dotlessFrom ~> dotlessTo) (markGlyphs.above ~> null)
			chain-rule (dotlessFrom ~> dotlessTo) markGlyphs.all (markGlyphs.above ~> null)
			chain-rule (dotlessFrom ~> dotlessTo) markGlyphs.all markGlyphs.all (markGlyphs.above ~> null)
			chain-rule (dotlessFrom ~> dotlessTo) markGlyphs.all markGlyphs.all markGlyphs.all (markGlyphs.above ~> null)
			chain-rule (dotlessFrom ~> dotlessTo) markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all (markGlyphs.above ~> null)
			chain-rule (dotlessFrom ~> dotlessTo) markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all (markGlyphs.above ~> null)
			chain-rule (dotlessFrom ~> dotlessTo) markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all (markGlyphs.above ~> null)

			# Iota transform (max 6 middle marks are supported)
			chain-rule groupLF [IotaLF]
			chain-rule groupLF markGlyphs.all [IotaLF]
			chain-rule groupLF markGlyphs.all markGlyphs.all [IotaLF]
			chain-rule groupLF markGlyphs.all markGlyphs.all markGlyphs.all [IotaLF]
			chain-rule groupLF markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all [IotaLF]
			chain-rule groupLF markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all [IotaLF]
			chain-rule groupLF markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all [IotaLF]

			# Ogonek transform (max 6 middle marks are supported)
			chain-rule groupTR [OgonekTrailing]
			chain-rule groupTR markGlyphs.all [OgonekTrailing]
			chain-rule groupTR markGlyphs.all markGlyphs.all [OgonekTrailing]
			chain-rule groupTR markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all [OgonekTrailing]
			chain-rule groupTR markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all [OgonekTrailing]
			chain-rule groupTR markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all markGlyphs.all [OgonekTrailing]

	define lookupCcmp2 : add-lookup sink : object
		.type 'gsub_ligature'
		.subtables : list : object : substitutions : list
			object [from {'commaAbove' 'graveAbove'}] [to 'psilivaria']
			object [from {'commaAbove' 'acuteAbove'}] [to 'psilioxia']
			object [from {'commaAbove' 'perispomeniAbove'}] [to 'psiliperispomeni']
			object [from {'revCommaAbove' 'graveAbove'}] [to 'dasiavaria']
			object [from {'revCommaAbove' 'acuteAbove'}] [to 'dasiaoxia']
			object [from {'revCommaAbove' 'perispomeniAbove'}] [to 'dasiaperispomeni']

	define lookupCcmp-ToneStart : add-lookup sink : object
		.type 'gsub_chaining'
		.subtables : list
			chain-rule [ToneToToneStart 0] {'tone0'}
			chain-rule [ToneToToneStart 1] {'tone1'}
			chain-rule [ToneToToneStart 2] {'tone2'}
			chain-rule [ToneToToneStart 3] {'tone3'}
			chain-rule [ToneToToneStart 4] {'tone4'}

	define lookupCcmp-ToneMid : add-lookup sink : object
		.type 'gsub_chaining'
		.subtables : list
			chain-rule [toneStartOrMidAt 0] [ToneStartToToneMid 0]
			chain-rule [toneStartOrMidAt 1] [ToneStartToToneMid 1]
			chain-rule [toneStartOrMidAt 2] [ToneStartToToneMid 2]
			chain-rule [toneStartOrMidAt 3] [ToneStartToToneMid 3]
			chain-rule [toneStartOrMidAt 4] [ToneStartToToneMid 4]

	define lookupCcmp-ToneEnd : add-lookup sink : object
		.type 'gsub_chaining'
		.subtables : list
			chain-rule [toneStartOrMidAt 0] [ToneToToneEnd 0]
			chain-rule [toneStartOrMidAt 1] [ToneToToneEnd 1]
			chain-rule [toneStartOrMidAt 2] [ToneToToneEnd 2]
			chain-rule [toneStartOrMidAt 3] [ToneToToneEnd 3]
			chain-rule [toneStartOrMidAt 4] [ToneToToneEnd 4]

	ccmp.lookups.push lookupCcmp1 lookupCcmp2
	ccmp.lookups.push lookupCcmp-ToneStart lookupCcmp-ToneMid lookupCcmp-ToneEnd
	add-common-feature sink ccmp
